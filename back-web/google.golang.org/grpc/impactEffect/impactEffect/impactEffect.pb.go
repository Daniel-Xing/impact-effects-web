// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: impactEffect.proto

package impactEffect

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Impactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diameter float32 `protobuf:"fixed32,1,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Density  float32 `protobuf:"fixed32,2,opt,name=density,proto3" json:"density,omitempty"`
	Velocity float32 `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Theta    float32 `protobuf:"fixed32,4,opt,name=theta,proto3" json:"theta,omitempty"`
	Depth    float32 `protobuf:"fixed32,5,opt,name=depth,proto3" json:"depth,omitempty"`
	Ttype    int64   `protobuf:"varint,6,opt,name=ttype,proto3" json:"ttype,omitempty"`
	Choice   int64   `protobuf:"varint,7,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Impactor) Reset() {
	*x = Impactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impactor) ProtoMessage() {}

func (x *Impactor) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impactor.ProtoReflect.Descriptor instead.
func (*Impactor) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{0}
}

func (x *Impactor) GetDiameter() float32 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *Impactor) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *Impactor) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *Impactor) GetTheta() float32 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Impactor) GetDepth() float32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Impactor) GetTtype() int64 {
	if x != nil {
		return x.Ttype
	}
	return 0
}

func (x *Impactor) GetChoice() int64 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type SimpleTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Density         float32 `protobuf:"fixed32,1,opt,name=density,proto3" json:"density,omitempty"`
	RhoSurface      float32 `protobuf:"fixed32,2,opt,name=rhoSurface,proto3" json:"rhoSurface,omitempty"`
	DragCoefficient float32 `protobuf:"fixed32,3,opt,name=dragCoefficient,proto3" json:"dragCoefficient,omitempty"`
}

func (x *SimpleTargets) Reset() {
	*x = SimpleTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTargets) ProtoMessage() {}

func (x *SimpleTargets) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTargets.ProtoReflect.Descriptor instead.
func (*SimpleTargets) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleTargets) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *SimpleTargets) GetRhoSurface() float32 {
	if x != nil {
		return x.RhoSurface
	}
	return 0
}

func (x *SimpleTargets) GetDragCoefficient() float32 {
	if x != nil {
		return x.DragCoefficient
	}
	return 0
}

type SimpleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor      `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *SimpleTargets `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *SimpleRequest) GetTargets() *SimpleTargets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res float32 `protobuf:"fixed32,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetRes() float32 {
	if x != nil {
		return x.Res
	}
	return 0
}

type KineticEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KineticEnergy float32 `protobuf:"fixed32,1,opt,name=kinetic_energy,json=kineticEnergy,proto3" json:"kinetic_energy,omitempty"`
}

func (x *KineticEnergy) Reset() {
	*x = KineticEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KineticEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KineticEnergy) ProtoMessage() {}

func (x *KineticEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KineticEnergy.ProtoReflect.Descriptor instead.
func (*KineticEnergy) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{4}
}

func (x *KineticEnergy) GetKineticEnergy() float32 {
	if x != nil {
		return x.KineticEnergy
	}
	return 0
}

type RecTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecTime float32 `protobuf:"fixed32,1,opt,name=rec_time,json=recTime,proto3" json:"rec_time,omitempty"`
}

func (x *RecTime) Reset() {
	*x = RecTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecTime) ProtoMessage() {}

func (x *RecTime) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecTime.ProtoReflect.Descriptor instead.
func (*RecTime) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{5}
}

func (x *RecTime) GetRecTime() float32 {
	if x != nil {
		return x.RecTime
	}
	return 0
}

var File_impactEffect_proto protoreflect.FileDescriptor

var file_impactEffect_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x0d, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x68, 0x6f, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x68, 0x6f, 0x53,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x64, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0d, 0x4b, 0x69, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x22, 0x24, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x87, 0x18, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1b, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x1b, 0x63,
	0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65, 0x72,
	0x6f, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x11, 0x61, 0x69, 0x72, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x14, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x18, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17,
	0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x14,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50, 0x49, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x1d, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63, 0x12,
	0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64, 0x69, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x1d, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64, 0x69, 0x61, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0b, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x63, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x14, 0x63,
	0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x32, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x61, 0x78, 0x12, 0x1b,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x63, 0x61, 0x6c,
	0x5f, 0x54, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x5f,
	0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1b,
	0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_impactEffect_proto_rawDescOnce sync.Once
	file_impactEffect_proto_rawDescData = file_impactEffect_proto_rawDesc
)

func file_impactEffect_proto_rawDescGZIP() []byte {
	file_impactEffect_proto_rawDescOnce.Do(func() {
		file_impactEffect_proto_rawDescData = protoimpl.X.CompressGZIP(file_impactEffect_proto_rawDescData)
	})
	return file_impactEffect_proto_rawDescData
}

var file_impactEffect_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_impactEffect_proto_goTypes = []interface{}{
	(*Impactor)(nil),      // 0: impactEffect.Impactor
	(*SimpleTargets)(nil), // 1: impactEffect.SimpleTargets
	(*SimpleRequest)(nil), // 2: impactEffect.SimpleRequest
	(*Result)(nil),        // 3: impactEffect.result
	(*KineticEnergy)(nil), // 4: impactEffect.KineticEnergy
	(*RecTime)(nil),       // 5: impactEffect.RecTime
}
var file_impactEffect_proto_depIdxs = []int32{
	0,  // 0: impactEffect.SimpleRequest.impactor:type_name -> impactEffect.Impactor
	1,  // 1: impactEffect.SimpleRequest.targets:type_name -> impactEffect.SimpleTargets
	0,  // 2: impactEffect.ImpactEffectService.cal_Kinetic_energy:input_type -> impactEffect.Impactor
	0,  // 3: impactEffect.ImpactEffectService.cal_kinetic_energy_megatons:input_type -> impactEffect.Impactor
	0,  // 4: impactEffect.ImpactEffectService.cal_rec_time:input_type -> impactEffect.Impactor
	2,  // 5: impactEffect.ImpactEffectService.cal_i_factor:input_type -> impactEffect.SimpleRequest
	2,  // 6: impactEffect.ImpactEffectService.burst_velocity_at_zero:input_type -> impactEffect.SimpleRequest
	2,  // 7: impactEffect.ImpactEffectService.altitude_of_breakup:input_type -> impactEffect.SimpleRequest
	2,  // 8: impactEffect.ImpactEffectService.velocity_at_breakup:input_type -> impactEffect.SimpleRequest
	2,  // 9: impactEffect.ImpactEffectService.dispersion_length_scale:input_type -> impactEffect.SimpleRequest
	2,  // 10: impactEffect.ImpactEffectService.airburst_altitude:input_type -> impactEffect.SimpleRequest
	2,  // 11: impactEffect.ImpactEffectService.brust_velocity:input_type -> impactEffect.SimpleRequest
	2,  // 12: impactEffect.ImpactEffectService.dispersion_of_impactor:input_type -> impactEffect.SimpleRequest
	2,  // 13: impactEffect.ImpactEffectService.fraction_of_momentum:input_type -> impactEffect.SimpleRequest
	2,  // 14: impactEffect.ImpactEffectService.cal_trot_change:input_type -> impactEffect.SimpleRequest
	2,  // 15: impactEffect.ImpactEffectService.cal_energy_atmosphere:input_type -> impactEffect.SimpleRequest
	2,  // 16: impactEffect.ImpactEffectService.cal_energy_blast_surface:input_type -> impactEffect.SimpleRequest
	2,  // 17: impactEffect.ImpactEffectService.cal_mass_of_water:input_type -> impactEffect.SimpleRequest
	2,  // 18: impactEffect.ImpactEffectService.cal_velocity_projectile:input_type -> impactEffect.SimpleRequest
	2,  // 19: impactEffect.ImpactEffectService.cal_ePIcentral_angle:input_type -> impactEffect.SimpleRequest
	2,  // 20: impactEffect.ImpactEffectService.cal_scaling_diameter_constant:input_type -> impactEffect.SimpleRequest
	2,  // 21: impactEffect.ImpactEffectService.cal_anglefac:input_type -> impactEffect.SimpleRequest
	2,  // 22: impactEffect.ImpactEffectService.cal_wdiameter:input_type -> impactEffect.SimpleRequest
	2,  // 23: impactEffect.ImpactEffectService.cal_transient_crater_diameter:input_type -> impactEffect.SimpleRequest
	2,  // 24: impactEffect.ImpactEffectService.cal_depthr:input_type -> impactEffect.SimpleRequest
	2,  // 25: impactEffect.ImpactEffectService.cal_cdiamater:input_type -> impactEffect.SimpleRequest
	2,  // 26: impactEffect.ImpactEffectService.cal_depthfr:input_type -> impactEffect.SimpleRequest
	2,  // 27: impactEffect.ImpactEffectService.cal_vCrater:input_type -> impactEffect.SimpleRequest
	2,  // 28: impactEffect.ImpactEffectService.cal_vratio:input_type -> impactEffect.SimpleRequest
	2,  // 29: impactEffect.ImpactEffectService.cal_vCrater_vRation:input_type -> impactEffect.SimpleRequest
	2,  // 30: impactEffect.ImpactEffectService.cal_vMelt:input_type -> impactEffect.SimpleRequest
	2,  // 31: impactEffect.ImpactEffectService.cal_mratio_and_mcratio:input_type -> impactEffect.SimpleRequest
	2,  // 32: impactEffect.ImpactEffectService.cal_eject_arrival:input_type -> impactEffect.SimpleRequest
	2,  // 33: impactEffect.ImpactEffectService.cal_ejecta_thickness:input_type -> impactEffect.SimpleRequest
	2,  // 34: impactEffect.ImpactEffectService.cal_themal:input_type -> impactEffect.SimpleRequest
	2,  // 35: impactEffect.ImpactEffectService.cal_magnitude:input_type -> impactEffect.SimpleRequest
	2,  // 36: impactEffect.ImpactEffectService.cal_magnitude2:input_type -> impactEffect.SimpleRequest
	2,  // 37: impactEffect.ImpactEffectService.cal_shock_arrival:input_type -> impactEffect.SimpleRequest
	2,  // 38: impactEffect.ImpactEffectService.cal_vmax:input_type -> impactEffect.SimpleRequest
	2,  // 39: impactEffect.ImpactEffectService.cal_dec_level:input_type -> impactEffect.SimpleRequest
	2,  // 40: impactEffect.ImpactEffectService.cal_TsunamiArrivalTime:input_type -> impactEffect.SimpleRequest
	2,  // 41: impactEffect.ImpactEffectService.cal_WaveAmplitudeUpperLimit:input_type -> impactEffect.SimpleRequest
	2,  // 42: impactEffect.ImpactEffectService.cal_WaveAmplitudeLowerLimit:input_type -> impactEffect.SimpleRequest
	4,  // 43: impactEffect.ImpactEffectService.cal_Kinetic_energy:output_type -> impactEffect.KineticEnergy
	4,  // 44: impactEffect.ImpactEffectService.cal_kinetic_energy_megatons:output_type -> impactEffect.KineticEnergy
	5,  // 45: impactEffect.ImpactEffectService.cal_rec_time:output_type -> impactEffect.RecTime
	3,  // 46: impactEffect.ImpactEffectService.cal_i_factor:output_type -> impactEffect.result
	3,  // 47: impactEffect.ImpactEffectService.burst_velocity_at_zero:output_type -> impactEffect.result
	3,  // 48: impactEffect.ImpactEffectService.altitude_of_breakup:output_type -> impactEffect.result
	3,  // 49: impactEffect.ImpactEffectService.velocity_at_breakup:output_type -> impactEffect.result
	3,  // 50: impactEffect.ImpactEffectService.dispersion_length_scale:output_type -> impactEffect.result
	3,  // 51: impactEffect.ImpactEffectService.airburst_altitude:output_type -> impactEffect.result
	3,  // 52: impactEffect.ImpactEffectService.brust_velocity:output_type -> impactEffect.result
	3,  // 53: impactEffect.ImpactEffectService.dispersion_of_impactor:output_type -> impactEffect.result
	3,  // 54: impactEffect.ImpactEffectService.fraction_of_momentum:output_type -> impactEffect.result
	3,  // 55: impactEffect.ImpactEffectService.cal_trot_change:output_type -> impactEffect.result
	3,  // 56: impactEffect.ImpactEffectService.cal_energy_atmosphere:output_type -> impactEffect.result
	3,  // 57: impactEffect.ImpactEffectService.cal_energy_blast_surface:output_type -> impactEffect.result
	3,  // 58: impactEffect.ImpactEffectService.cal_mass_of_water:output_type -> impactEffect.result
	3,  // 59: impactEffect.ImpactEffectService.cal_velocity_projectile:output_type -> impactEffect.result
	3,  // 60: impactEffect.ImpactEffectService.cal_ePIcentral_angle:output_type -> impactEffect.result
	3,  // 61: impactEffect.ImpactEffectService.cal_scaling_diameter_constant:output_type -> impactEffect.result
	3,  // 62: impactEffect.ImpactEffectService.cal_anglefac:output_type -> impactEffect.result
	3,  // 63: impactEffect.ImpactEffectService.cal_wdiameter:output_type -> impactEffect.result
	3,  // 64: impactEffect.ImpactEffectService.cal_transient_crater_diameter:output_type -> impactEffect.result
	3,  // 65: impactEffect.ImpactEffectService.cal_depthr:output_type -> impactEffect.result
	3,  // 66: impactEffect.ImpactEffectService.cal_cdiamater:output_type -> impactEffect.result
	3,  // 67: impactEffect.ImpactEffectService.cal_depthfr:output_type -> impactEffect.result
	3,  // 68: impactEffect.ImpactEffectService.cal_vCrater:output_type -> impactEffect.result
	3,  // 69: impactEffect.ImpactEffectService.cal_vratio:output_type -> impactEffect.result
	3,  // 70: impactEffect.ImpactEffectService.cal_vCrater_vRation:output_type -> impactEffect.result
	3,  // 71: impactEffect.ImpactEffectService.cal_vMelt:output_type -> impactEffect.result
	3,  // 72: impactEffect.ImpactEffectService.cal_mratio_and_mcratio:output_type -> impactEffect.result
	3,  // 73: impactEffect.ImpactEffectService.cal_eject_arrival:output_type -> impactEffect.result
	3,  // 74: impactEffect.ImpactEffectService.cal_ejecta_thickness:output_type -> impactEffect.result
	3,  // 75: impactEffect.ImpactEffectService.cal_themal:output_type -> impactEffect.result
	3,  // 76: impactEffect.ImpactEffectService.cal_magnitude:output_type -> impactEffect.result
	3,  // 77: impactEffect.ImpactEffectService.cal_magnitude2:output_type -> impactEffect.result
	3,  // 78: impactEffect.ImpactEffectService.cal_shock_arrival:output_type -> impactEffect.result
	3,  // 79: impactEffect.ImpactEffectService.cal_vmax:output_type -> impactEffect.result
	3,  // 80: impactEffect.ImpactEffectService.cal_dec_level:output_type -> impactEffect.result
	3,  // 81: impactEffect.ImpactEffectService.cal_TsunamiArrivalTime:output_type -> impactEffect.result
	3,  // 82: impactEffect.ImpactEffectService.cal_WaveAmplitudeUpperLimit:output_type -> impactEffect.result
	3,  // 83: impactEffect.ImpactEffectService.cal_WaveAmplitudeLowerLimit:output_type -> impactEffect.result
	43, // [43:84] is the sub-list for method output_type
	2,  // [2:43] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_impactEffect_proto_init() }
func file_impactEffect_proto_init() {
	if File_impactEffect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_impactEffect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KineticEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_impactEffect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_impactEffect_proto_goTypes,
		DependencyIndexes: file_impactEffect_proto_depIdxs,
		MessageInfos:      file_impactEffect_proto_msgTypes,
	}.Build()
	File_impactEffect_proto = out.File
	file_impactEffect_proto_rawDesc = nil
	file_impactEffect_proto_goTypes = nil
	file_impactEffect_proto_depIdxs = nil
}
