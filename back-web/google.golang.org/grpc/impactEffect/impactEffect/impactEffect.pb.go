// Copyright 2015 gRPC authors.
//
//float  Licensed under the Apache License; Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//float  Unless required by applicable law or agreed to in writing; software
//float  distributed under the License is distributed on an "AS IS" BASIS;
//float  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND; either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: impactEffect.proto

package impactEffect

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Impactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diameter float32 `protobuf:"fixed32,1,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Density  float32 `protobuf:"fixed32,2,opt,name=density,proto3" json:"density,omitempty"`
	Velocity float32 `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Theta    float32 `protobuf:"fixed32,4,opt,name=theta,proto3" json:"theta,omitempty"`
}

func (x *Impactor) Reset() {
	*x = Impactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impactor) ProtoMessage() {}

func (x *Impactor) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impactor.ProtoReflect.Descriptor instead.
func (*Impactor) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{0}
}

func (x *Impactor) GetDiameter() float32 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *Impactor) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *Impactor) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *Impactor) GetTheta() float32 {
	if x != nil {
		return x.Theta
	}
	return 0
}

type Targets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth           float32 `protobuf:"fixed32,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Distance        float32 `protobuf:"fixed32,2,opt,name=distance,proto3" json:"distance,omitempty"`
	Density         float32 `protobuf:"fixed32,3,opt,name=density,proto3" json:"density,omitempty"`
	Ttype           float32 `protobuf:"fixed32,4,opt,name=ttype,proto3" json:"ttype,omitempty"`
	RhoSurface      float32 `protobuf:"fixed32,5,opt,name=rhoSurface,proto3" json:"rhoSurface,omitempty"`
	DragC           float32 `protobuf:"fixed32,6,opt,name=dragC,proto3" json:"dragC,omitempty"`
	SchaleHeight    float32 `protobuf:"fixed32,7,opt,name=schaleHeight,proto3" json:"schaleHeight,omitempty"`
	Fp              float32 `protobuf:"fixed32,8,opt,name=fp,proto3" json:"fp,omitempty"`
	PEarth          float32 `protobuf:"fixed32,9,opt,name=pEarth,proto3" json:"pEarth,omitempty"`
	MEarth          float32 `protobuf:"fixed32,10,opt,name=mEarth,proto3" json:"mEarth,omitempty"`
	LEarth          float32 `protobuf:"fixed32,11,opt,name=lEarth,proto3" json:"lEarth,omitempty"`
	G               float32 `protobuf:"fixed32,12,opt,name=g,proto3" json:"g,omitempty"`
	REarth          float32 `protobuf:"fixed32,13,opt,name=R_earth,json=REarth,proto3" json:"R_earth,omitempty"`
	SurfaceWaveV    float32 `protobuf:"fixed32,14,opt,name=surface_wave_v,json=surfaceWaveV,proto3" json:"surface_wave_v,omitempty"`
	MeltCoeff       float32 `protobuf:"fixed32,15,opt,name=melt_coeff,json=meltCoeff,proto3" json:"melt_coeff,omitempty"`
	VEarth          float32 `protobuf:"fixed32,16,opt,name=vEarth,proto3" json:"vEarth,omitempty"`
	Po              float32 `protobuf:"fixed32,17,opt,name=Po,proto3" json:"Po,omitempty"`
	SeefloorDensity float32 `protobuf:"fixed32,18,opt,name=seefloor_density,json=seefloorDensity,proto3" json:"seefloor_density,omitempty"`
}

func (x *Targets) Reset() {
	*x = Targets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Targets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Targets) ProtoMessage() {}

func (x *Targets) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Targets.ProtoReflect.Descriptor instead.
func (*Targets) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{1}
}

func (x *Targets) GetDepth() float32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Targets) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Targets) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *Targets) GetTtype() float32 {
	if x != nil {
		return x.Ttype
	}
	return 0
}

func (x *Targets) GetRhoSurface() float32 {
	if x != nil {
		return x.RhoSurface
	}
	return 0
}

func (x *Targets) GetDragC() float32 {
	if x != nil {
		return x.DragC
	}
	return 0
}

func (x *Targets) GetSchaleHeight() float32 {
	if x != nil {
		return x.SchaleHeight
	}
	return 0
}

func (x *Targets) GetFp() float32 {
	if x != nil {
		return x.Fp
	}
	return 0
}

func (x *Targets) GetPEarth() float32 {
	if x != nil {
		return x.PEarth
	}
	return 0
}

func (x *Targets) GetMEarth() float32 {
	if x != nil {
		return x.MEarth
	}
	return 0
}

func (x *Targets) GetLEarth() float32 {
	if x != nil {
		return x.LEarth
	}
	return 0
}

func (x *Targets) GetG() float32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Targets) GetREarth() float32 {
	if x != nil {
		return x.REarth
	}
	return 0
}

func (x *Targets) GetSurfaceWaveV() float32 {
	if x != nil {
		return x.SurfaceWaveV
	}
	return 0
}

func (x *Targets) GetMeltCoeff() float32 {
	if x != nil {
		return x.MeltCoeff
	}
	return 0
}

func (x *Targets) GetVEarth() float32 {
	if x != nil {
		return x.VEarth
	}
	return 0
}

func (x *Targets) GetPo() float32 {
	if x != nil {
		return x.Po
	}
	return 0
}

func (x *Targets) GetSeefloorDensity() float32 {
	if x != nil {
		return x.SeefloorDensity
	}
	return 0
}

type ExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Choice   int32     `protobuf:"varint,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *ExampleRequest) Reset() {
	*x = ExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleRequest) ProtoMessage() {}

func (x *ExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleRequest.ProtoReflect.Descriptor instead.
func (*ExampleRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{2}
}

func (x *ExampleRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *ExampleRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type ExampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Example float32 `protobuf:"fixed32,1,opt,name=example,proto3" json:"example,omitempty"`
}

func (x *ExampleResponse) Reset() {
	*x = ExampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleResponse) ProtoMessage() {}

func (x *ExampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleResponse.ProtoReflect.Descriptor instead.
func (*ExampleResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{3}
}

func (x *ExampleResponse) GetExample() float32 {
	if x != nil {
		return x.Example
	}
	return 0
}

type CalMassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
}

func (x *CalMassRequest) Reset() {
	*x = CalMassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMassRequest) ProtoMessage() {}

func (x *CalMassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMassRequest.ProtoReflect.Descriptor instead.
func (*CalMassRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{4}
}

func (x *CalMassRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

type CalMassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mass float32 `protobuf:"fixed32,1,opt,name=mass,proto3" json:"mass,omitempty"`
}

func (x *CalMassResponse) Reset() {
	*x = CalMassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMassResponse) ProtoMessage() {}

func (x *CalMassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMassResponse.ProtoReflect.Descriptor instead.
func (*CalMassResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{5}
}

func (x *CalMassResponse) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type Cal_KineticEnergyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Choice   int32     `protobuf:"varint,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Cal_KineticEnergyRequest) Reset() {
	*x = Cal_KineticEnergyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_KineticEnergyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_KineticEnergyRequest) ProtoMessage() {}

func (x *Cal_KineticEnergyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_KineticEnergyRequest.ProtoReflect.Descriptor instead.
func (*Cal_KineticEnergyRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{6}
}

func (x *Cal_KineticEnergyRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *Cal_KineticEnergyRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type Cal_KineticEnergyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KineticEnergy float32 `protobuf:"fixed32,1,opt,name=Kinetic_energy,json=KineticEnergy,proto3" json:"Kinetic_energy,omitempty"`
}

func (x *Cal_KineticEnergyResponse) Reset() {
	*x = Cal_KineticEnergyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_KineticEnergyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_KineticEnergyResponse) ProtoMessage() {}

func (x *Cal_KineticEnergyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_KineticEnergyResponse.ProtoReflect.Descriptor instead.
func (*Cal_KineticEnergyResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{7}
}

func (x *Cal_KineticEnergyResponse) GetKineticEnergy() float32 {
	if x != nil {
		return x.KineticEnergy
	}
	return 0
}

type CalKineticEnergyMegatonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Choice   int32     `protobuf:"varint,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalKineticEnergyMegatonsRequest) Reset() {
	*x = CalKineticEnergyMegatonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalKineticEnergyMegatonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalKineticEnergyMegatonsRequest) ProtoMessage() {}

func (x *CalKineticEnergyMegatonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalKineticEnergyMegatonsRequest.ProtoReflect.Descriptor instead.
func (*CalKineticEnergyMegatonsRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{8}
}

func (x *CalKineticEnergyMegatonsRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalKineticEnergyMegatonsRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalKineticEnergyMegatonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KineticEnergyMegatons float32 `protobuf:"fixed32,1,opt,name=kinetic_energy_megatons,json=kineticEnergyMegatons,proto3" json:"kinetic_energy_megatons,omitempty"`
}

func (x *CalKineticEnergyMegatonsResponse) Reset() {
	*x = CalKineticEnergyMegatonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalKineticEnergyMegatonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalKineticEnergyMegatonsResponse) ProtoMessage() {}

func (x *CalKineticEnergyMegatonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalKineticEnergyMegatonsResponse.ProtoReflect.Descriptor instead.
func (*CalKineticEnergyMegatonsResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{9}
}

func (x *CalKineticEnergyMegatonsResponse) GetKineticEnergyMegatons() float32 {
	if x != nil {
		return x.KineticEnergyMegatons
	}
	return 0
}

type CalRecTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Choice   int32     `protobuf:"varint,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalRecTimeRequest) Reset() {
	*x = CalRecTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalRecTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalRecTimeRequest) ProtoMessage() {}

func (x *CalRecTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalRecTimeRequest.ProtoReflect.Descriptor instead.
func (*CalRecTimeRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{10}
}

func (x *CalRecTimeRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalRecTimeRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalRecTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecTime float32 `protobuf:"fixed32,1,opt,name=rec_time,json=recTime,proto3" json:"rec_time,omitempty"`
}

func (x *CalRecTimeResponse) Reset() {
	*x = CalRecTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalRecTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalRecTimeResponse) ProtoMessage() {}

func (x *CalRecTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalRecTimeResponse.ProtoReflect.Descriptor instead.
func (*CalRecTimeResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{11}
}

func (x *CalRecTimeResponse) GetRecTime() float32 {
	if x != nil {
		return x.RecTime
	}
	return 0
}

type CalIFactorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalIFactorRequest) Reset() {
	*x = CalIFactorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalIFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalIFactorRequest) ProtoMessage() {}

func (x *CalIFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalIFactorRequest.ProtoReflect.Descriptor instead.
func (*CalIFactorRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{12}
}

func (x *CalIFactorRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalIFactorRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalIFactorRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalIFactorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IFactor   float32 `protobuf:"fixed32,1,opt,name=i_factor,json=iFactor,proto3" json:"i_factor,omitempty"`
	Av        float32 `protobuf:"fixed32,2,opt,name=av,proto3" json:"av,omitempty"`
	RStrength float32 `protobuf:"fixed32,3,opt,name=rStrength,proto3" json:"rStrength,omitempty"`
}

func (x *CalIFactorResponse) Reset() {
	*x = CalIFactorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalIFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalIFactorResponse) ProtoMessage() {}

func (x *CalIFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalIFactorResponse.ProtoReflect.Descriptor instead.
func (*CalIFactorResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{13}
}

func (x *CalIFactorResponse) GetIFactor() float32 {
	if x != nil {
		return x.IFactor
	}
	return 0
}

func (x *CalIFactorResponse) GetAv() float32 {
	if x != nil {
		return x.Av
	}
	return 0
}

func (x *CalIFactorResponse) GetRStrength() float32 {
	if x != nil {
		return x.RStrength
	}
	return 0
}

type BurstVelocityAtZeroRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *BurstVelocityAtZeroRequest) Reset() {
	*x = BurstVelocityAtZeroRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstVelocityAtZeroRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstVelocityAtZeroRequest) ProtoMessage() {}

func (x *BurstVelocityAtZeroRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstVelocityAtZeroRequest.ProtoReflect.Descriptor instead.
func (*BurstVelocityAtZeroRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{14}
}

func (x *BurstVelocityAtZeroRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *BurstVelocityAtZeroRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *BurstVelocityAtZeroRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type BurstVelocityAtZeroResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VelocityAtSurface float32 `protobuf:"fixed32,1,opt,name=velocity_at_surface,json=velocityAtSurface,proto3" json:"velocity_at_surface,omitempty"`
}

func (x *BurstVelocityAtZeroResponse) Reset() {
	*x = BurstVelocityAtZeroResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurstVelocityAtZeroResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstVelocityAtZeroResponse) ProtoMessage() {}

func (x *BurstVelocityAtZeroResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstVelocityAtZeroResponse.ProtoReflect.Descriptor instead.
func (*BurstVelocityAtZeroResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{15}
}

func (x *BurstVelocityAtZeroResponse) GetVelocityAtSurface() float32 {
	if x != nil {
		return x.VelocityAtSurface
	}
	return 0
}

type AltitudeOfBreakupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor       *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets        *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	CollinsIFactor float32   `protobuf:"fixed32,3,opt,name=collins_iFactor,json=collinsIFactor,proto3" json:"collins_iFactor,omitempty"`
	RStrength      float32   `protobuf:"fixed32,4,opt,name=rStrength,proto3" json:"rStrength,omitempty"`
	Choice         int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *AltitudeOfBreakupRequest) Reset() {
	*x = AltitudeOfBreakupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltitudeOfBreakupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltitudeOfBreakupRequest) ProtoMessage() {}

func (x *AltitudeOfBreakupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltitudeOfBreakupRequest.ProtoReflect.Descriptor instead.
func (*AltitudeOfBreakupRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{16}
}

func (x *AltitudeOfBreakupRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *AltitudeOfBreakupRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *AltitudeOfBreakupRequest) GetCollinsIFactor() float32 {
	if x != nil {
		return x.CollinsIFactor
	}
	return 0
}

func (x *AltitudeOfBreakupRequest) GetRStrength() float32 {
	if x != nil {
		return x.RStrength
	}
	return 0
}

func (x *AltitudeOfBreakupRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type AltitudeOfBreakupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltitudeBU float32 `protobuf:"fixed32,1,opt,name=altitudeBU,proto3" json:"altitudeBU,omitempty"`
}

func (x *AltitudeOfBreakupResponse) Reset() {
	*x = AltitudeOfBreakupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltitudeOfBreakupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltitudeOfBreakupResponse) ProtoMessage() {}

func (x *AltitudeOfBreakupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltitudeOfBreakupResponse.ProtoReflect.Descriptor instead.
func (*AltitudeOfBreakupResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{17}
}

func (x *AltitudeOfBreakupResponse) GetAltitudeBU() float32 {
	if x != nil {
		return x.AltitudeBU
	}
	return 0
}

type VelocityAtBreakupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor   *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets    *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Av         float32   `protobuf:"fixed32,3,opt,name=av,proto3" json:"av,omitempty"`
	AltitudeBU float32   `protobuf:"fixed32,4,opt,name=altitudeBU,proto3" json:"altitudeBU,omitempty"`
	Choice     int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *VelocityAtBreakupRequest) Reset() {
	*x = VelocityAtBreakupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VelocityAtBreakupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityAtBreakupRequest) ProtoMessage() {}

func (x *VelocityAtBreakupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityAtBreakupRequest.ProtoReflect.Descriptor instead.
func (*VelocityAtBreakupRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{18}
}

func (x *VelocityAtBreakupRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *VelocityAtBreakupRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *VelocityAtBreakupRequest) GetAv() float32 {
	if x != nil {
		return x.Av
	}
	return 0
}

func (x *VelocityAtBreakupRequest) GetAltitudeBU() float32 {
	if x != nil {
		return x.AltitudeBU
	}
	return 0
}

func (x *VelocityAtBreakupRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type VelocityAtBreakupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Velocity float32 `protobuf:"fixed32,1,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *VelocityAtBreakupResponse) Reset() {
	*x = VelocityAtBreakupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VelocityAtBreakupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityAtBreakupResponse) ProtoMessage() {}

func (x *VelocityAtBreakupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityAtBreakupResponse.ProtoReflect.Descriptor instead.
func (*VelocityAtBreakupResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{19}
}

func (x *VelocityAtBreakupResponse) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

type DispersionLengthScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor   *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets    *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBU float32   `protobuf:"fixed32,3,opt,name=altitudeBU,proto3" json:"altitudeBU,omitempty"`
	Choice     int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *DispersionLengthScaleRequest) Reset() {
	*x = DispersionLengthScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispersionLengthScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispersionLengthScaleRequest) ProtoMessage() {}

func (x *DispersionLengthScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispersionLengthScaleRequest.ProtoReflect.Descriptor instead.
func (*DispersionLengthScaleRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{20}
}

func (x *DispersionLengthScaleRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *DispersionLengthScaleRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *DispersionLengthScaleRequest) GetAltitudeBU() float32 {
	if x != nil {
		return x.AltitudeBU
	}
	return 0
}

func (x *DispersionLengthScaleRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type DispersionLengthScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LDisper float32 `protobuf:"fixed32,1,opt,name=lDisper,proto3" json:"lDisper,omitempty"`
}

func (x *DispersionLengthScaleResponse) Reset() {
	*x = DispersionLengthScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispersionLengthScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispersionLengthScaleResponse) ProtoMessage() {}

func (x *DispersionLengthScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispersionLengthScaleResponse.ProtoReflect.Descriptor instead.
func (*DispersionLengthScaleResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{21}
}

func (x *DispersionLengthScaleResponse) GetLDisper() float32 {
	if x != nil {
		return x.LDisper
	}
	return 0
}

type AirburstAltitudeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Alpha2   float32   `protobuf:"fixed32,3,opt,name=alpha2,proto3" json:"alpha2,omitempty"`
	LDisper  float32   `protobuf:"fixed32,4,opt,name=lDisper,proto3" json:"lDisper,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *AirburstAltitudeRequest) Reset() {
	*x = AirburstAltitudeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirburstAltitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirburstAltitudeRequest) ProtoMessage() {}

func (x *AirburstAltitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirburstAltitudeRequest.ProtoReflect.Descriptor instead.
func (*AirburstAltitudeRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{22}
}

func (x *AirburstAltitudeRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *AirburstAltitudeRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *AirburstAltitudeRequest) GetAlpha2() float32 {
	if x != nil {
		return x.Alpha2
	}
	return 0
}

func (x *AirburstAltitudeRequest) GetLDisper() float32 {
	if x != nil {
		return x.LDisper
	}
	return 0
}

func (x *AirburstAltitudeRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type AirburstAltitudeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltitudeBurst float32 `protobuf:"fixed32,1,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
}

func (x *AirburstAltitudeResponse) Reset() {
	*x = AirburstAltitudeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirburstAltitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirburstAltitudeResponse) ProtoMessage() {}

func (x *AirburstAltitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirburstAltitudeResponse.ProtoReflect.Descriptor instead.
func (*AirburstAltitudeResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{23}
}

func (x *AirburstAltitudeResponse) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

type BrustVelocityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	AltitudeBU    float32   `protobuf:"fixed32,4,opt,name=altitudeBU,proto3" json:"altitudeBU,omitempty"`
	VBu           float32   `protobuf:"fixed32,5,opt,name=vBu,proto3" json:"vBu,omitempty"`
	LDisper       float32   `protobuf:"fixed32,6,opt,name=lDisper,proto3" json:"lDisper,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *BrustVelocityRequest) Reset() {
	*x = BrustVelocityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrustVelocityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrustVelocityRequest) ProtoMessage() {}

func (x *BrustVelocityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrustVelocityRequest.ProtoReflect.Descriptor instead.
func (*BrustVelocityRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{24}
}

func (x *BrustVelocityRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *BrustVelocityRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *BrustVelocityRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *BrustVelocityRequest) GetAltitudeBU() float32 {
	if x != nil {
		return x.AltitudeBU
	}
	return 0
}

func (x *BrustVelocityRequest) GetVBu() float32 {
	if x != nil {
		return x.VBu
	}
	return 0
}

func (x *BrustVelocityRequest) GetLDisper() float32 {
	if x != nil {
		return x.LDisper
	}
	return 0
}

func (x *BrustVelocityRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type BrustVelocityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Velocity float32 `protobuf:"fixed32,1,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *BrustVelocityResponse) Reset() {
	*x = BrustVelocityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrustVelocityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrustVelocityResponse) ProtoMessage() {}

func (x *BrustVelocityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrustVelocityResponse.ProtoReflect.Descriptor instead.
func (*BrustVelocityResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{25}
}

func (x *BrustVelocityResponse) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

type DispersionOfImpactorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	LDisper       float32   `protobuf:"fixed32,3,opt,name=l_disper,json=lDisper,proto3" json:"l_disper,omitempty"`
	AltitudeBu    float32   `protobuf:"fixed32,4,opt,name=altitude_bu,json=altitudeBu,proto3" json:"altitude_bu,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,5,opt,name=altitude_burst,json=altitudeBurst,proto3" json:"altitude_burst,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *DispersionOfImpactorRequest) Reset() {
	*x = DispersionOfImpactorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispersionOfImpactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispersionOfImpactorRequest) ProtoMessage() {}

func (x *DispersionOfImpactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispersionOfImpactorRequest.ProtoReflect.Descriptor instead.
func (*DispersionOfImpactorRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{26}
}

func (x *DispersionOfImpactorRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *DispersionOfImpactorRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *DispersionOfImpactorRequest) GetLDisper() float32 {
	if x != nil {
		return x.LDisper
	}
	return 0
}

func (x *DispersionOfImpactorRequest) GetAltitudeBu() float32 {
	if x != nil {
		return x.AltitudeBu
	}
	return 0
}

func (x *DispersionOfImpactorRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *DispersionOfImpactorRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type DispersionOfImpactorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispersion float32 `protobuf:"fixed32,1,opt,name=dispersion,proto3" json:"dispersion,omitempty"`
}

func (x *DispersionOfImpactorResponse) Reset() {
	*x = DispersionOfImpactorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispersionOfImpactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispersionOfImpactorResponse) ProtoMessage() {}

func (x *DispersionOfImpactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispersionOfImpactorResponse.ProtoReflect.Descriptor instead.
func (*DispersionOfImpactorResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{27}
}

func (x *DispersionOfImpactorResponse) GetDispersion() float32 {
	if x != nil {
		return x.Dispersion
	}
	return 0
}

type FractionOfMomentumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *FractionOfMomentumRequest) Reset() {
	*x = FractionOfMomentumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionOfMomentumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionOfMomentumRequest) ProtoMessage() {}

func (x *FractionOfMomentumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionOfMomentumRequest.ProtoReflect.Descriptor instead.
func (*FractionOfMomentumRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{28}
}

func (x *FractionOfMomentumRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *FractionOfMomentumRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *FractionOfMomentumRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *FractionOfMomentumRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type FractionOfMomentumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lratio float32 `protobuf:"fixed32,1,opt,name=lratio,proto3" json:"lratio,omitempty"`
	Pratio float32 `protobuf:"fixed32,2,opt,name=pratio,proto3" json:"pratio,omitempty"`
}

func (x *FractionOfMomentumResponse) Reset() {
	*x = FractionOfMomentumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionOfMomentumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionOfMomentumResponse) ProtoMessage() {}

func (x *FractionOfMomentumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionOfMomentumResponse.ProtoReflect.Descriptor instead.
func (*FractionOfMomentumResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{29}
}

func (x *FractionOfMomentumResponse) GetLratio() float32 {
	if x != nil {
		return x.Lratio
	}
	return 0
}

func (x *FractionOfMomentumResponse) GetPratio() float32 {
	if x != nil {
		return x.Pratio
	}
	return 0
}

type CalTrotChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalTrotChangeRequest) Reset() {
	*x = CalTrotChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalTrotChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalTrotChangeRequest) ProtoMessage() {}

func (x *CalTrotChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalTrotChangeRequest.ProtoReflect.Descriptor instead.
func (*CalTrotChangeRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{30}
}

func (x *CalTrotChangeRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalTrotChangeRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalTrotChangeRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalTrotChangeRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalTrotChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrotChange float32 `protobuf:"fixed32,1,opt,name=trot_change,json=trotChange,proto3" json:"trot_change,omitempty"`
}

func (x *CalTrotChangeResponse) Reset() {
	*x = CalTrotChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalTrotChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalTrotChangeResponse) ProtoMessage() {}

func (x *CalTrotChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalTrotChangeResponse.ProtoReflect.Descriptor instead.
func (*CalTrotChangeResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{31}
}

func (x *CalTrotChangeResponse) GetTrotChange() float32 {
	if x != nil {
		return x.TrotChange
	}
	return 0
}

type CalEnergyAtmosphereRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEnergyAtmosphereRequest) Reset() {
	*x = CalEnergyAtmosphereRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyAtmosphereRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyAtmosphereRequest) ProtoMessage() {}

func (x *CalEnergyAtmosphereRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyAtmosphereRequest.ProtoReflect.Descriptor instead.
func (*CalEnergyAtmosphereRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{32}
}

func (x *CalEnergyAtmosphereRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEnergyAtmosphereRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEnergyAtmosphereRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalEnergyAtmosphereRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEnergyAtmosphereResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergyAtmosphere float32 `protobuf:"fixed32,1,opt,name=energy_atmosphere,json=energyAtmosphere,proto3" json:"energy_atmosphere,omitempty"`
}

func (x *CalEnergyAtmosphereResponse) Reset() {
	*x = CalEnergyAtmosphereResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyAtmosphereResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyAtmosphereResponse) ProtoMessage() {}

func (x *CalEnergyAtmosphereResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyAtmosphereResponse.ProtoReflect.Descriptor instead.
func (*CalEnergyAtmosphereResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{33}
}

func (x *CalEnergyAtmosphereResponse) GetEnergyAtmosphere() float32 {
	if x != nil {
		return x.EnergyAtmosphere
	}
	return 0
}

type CalEnergyBlastSurfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor         *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets          *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity         float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	AltitudeBurst    float32   `protobuf:"fixed32,4,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	EnergyAtmosphere float32   `protobuf:"fixed32,5,opt,name=energy_atmosphere,json=energyAtmosphere,proto3" json:"energy_atmosphere,omitempty"`
	Choice           int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEnergyBlastSurfaceRequest) Reset() {
	*x = CalEnergyBlastSurfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyBlastSurfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyBlastSurfaceRequest) ProtoMessage() {}

func (x *CalEnergyBlastSurfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyBlastSurfaceRequest.ProtoReflect.Descriptor instead.
func (*CalEnergyBlastSurfaceRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{34}
}

func (x *CalEnergyBlastSurfaceRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEnergyBlastSurfaceRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEnergyBlastSurfaceRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalEnergyBlastSurfaceRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalEnergyBlastSurfaceRequest) GetEnergyAtmosphere() float32 {
	if x != nil {
		return x.EnergyAtmosphere
	}
	return 0
}

func (x *CalEnergyBlastSurfaceRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEnergyBlastSurfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergyBlast   float32 `protobuf:"fixed32,1,opt,name=energy_blast,json=energyBlast,proto3" json:"energy_blast,omitempty"`
	EnergySurface float32 `protobuf:"fixed32,2,opt,name=energy_surface,json=energySurface,proto3" json:"energy_surface,omitempty"`
}

func (x *CalEnergyBlastSurfaceResponse) Reset() {
	*x = CalEnergyBlastSurfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyBlastSurfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyBlastSurfaceResponse) ProtoMessage() {}

func (x *CalEnergyBlastSurfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyBlastSurfaceResponse.ProtoReflect.Descriptor instead.
func (*CalEnergyBlastSurfaceResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{35}
}

func (x *CalEnergyBlastSurfaceResponse) GetEnergyBlast() float32 {
	if x != nil {
		return x.EnergyBlast
	}
	return 0
}

func (x *CalEnergyBlastSurfaceResponse) GetEnergySurface() float32 {
	if x != nil {
		return x.EnergySurface
	}
	return 0
}

type CalMassOfWaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalMassOfWaterRequest) Reset() {
	*x = CalMassOfWaterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMassOfWaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMassOfWaterRequest) ProtoMessage() {}

func (x *CalMassOfWaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMassOfWaterRequest.ProtoReflect.Descriptor instead.
func (*CalMassOfWaterRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{36}
}

func (x *CalMassOfWaterRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalMassOfWaterRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalMassOfWaterRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalMassOfWaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mwater float32 `protobuf:"fixed32,1,opt,name=mwater,proto3" json:"mwater,omitempty"`
}

func (x *CalMassOfWaterResponse) Reset() {
	*x = CalMassOfWaterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMassOfWaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMassOfWaterResponse) ProtoMessage() {}

func (x *CalMassOfWaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMassOfWaterResponse.ProtoReflect.Descriptor instead.
func (*CalMassOfWaterResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{37}
}

func (x *CalMassOfWaterResponse) GetMwater() float32 {
	if x != nil {
		return x.Mwater
	}
	return 0
}

type CalVelocityProjectileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVelocityProjectileRequest) Reset() {
	*x = CalVelocityProjectileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVelocityProjectileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVelocityProjectileRequest) ProtoMessage() {}

func (x *CalVelocityProjectileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVelocityProjectileRequest.ProtoReflect.Descriptor instead.
func (*CalVelocityProjectileRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{38}
}

func (x *CalVelocityProjectileRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVelocityProjectileRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVelocityProjectileRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalVelocityProjectileRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVelocityProjectileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vseafloor float32 `protobuf:"fixed32,1,opt,name=vseafloor,proto3" json:"vseafloor,omitempty"`
}

func (x *CalVelocityProjectileResponse) Reset() {
	*x = CalVelocityProjectileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVelocityProjectileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVelocityProjectileResponse) ProtoMessage() {}

func (x *CalVelocityProjectileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVelocityProjectileResponse.ProtoReflect.Descriptor instead.
func (*CalVelocityProjectileResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{39}
}

func (x *CalVelocityProjectileResponse) GetVseafloor() float32 {
	if x != nil {
		return x.Vseafloor
	}
	return 0
}

type CalEnergyAtSeafloorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Vseafloor float32   `protobuf:"fixed32,3,opt,name=vseafloor,proto3" json:"vseafloor,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEnergyAtSeafloorRequest) Reset() {
	*x = CalEnergyAtSeafloorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyAtSeafloorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyAtSeafloorRequest) ProtoMessage() {}

func (x *CalEnergyAtSeafloorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyAtSeafloorRequest.ProtoReflect.Descriptor instead.
func (*CalEnergyAtSeafloorRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{40}
}

func (x *CalEnergyAtSeafloorRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEnergyAtSeafloorRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEnergyAtSeafloorRequest) GetVseafloor() float32 {
	if x != nil {
		return x.Vseafloor
	}
	return 0
}

func (x *CalEnergyAtSeafloorRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEnergyAtSeafloorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnergySeafloor float32 `protobuf:"fixed32,1,opt,name=energy_seafloor,json=energySeafloor,proto3" json:"energy_seafloor,omitempty"`
}

func (x *CalEnergyAtSeafloorResponse) Reset() {
	*x = CalEnergyAtSeafloorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEnergyAtSeafloorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEnergyAtSeafloorResponse) ProtoMessage() {}

func (x *CalEnergyAtSeafloorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEnergyAtSeafloorResponse.ProtoReflect.Descriptor instead.
func (*CalEnergyAtSeafloorResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{41}
}

func (x *CalEnergyAtSeafloorResponse) GetEnergySeafloor() float32 {
	if x != nil {
		return x.EnergySeafloor
	}
	return 0
}

type CalEPIcentralAngleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEPIcentralAngleRequest) Reset() {
	*x = CalEPIcentralAngleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEPIcentralAngleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEPIcentralAngleRequest) ProtoMessage() {}

func (x *CalEPIcentralAngleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEPIcentralAngleRequest.ProtoReflect.Descriptor instead.
func (*CalEPIcentralAngleRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{42}
}

func (x *CalEPIcentralAngleRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEPIcentralAngleRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEPIcentralAngleRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEPIcentralAngleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta float32 `protobuf:"fixed32,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *CalEPIcentralAngleResponse) Reset() {
	*x = CalEPIcentralAngleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEPIcentralAngleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEPIcentralAngleResponse) ProtoMessage() {}

func (x *CalEPIcentralAngleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEPIcentralAngleResponse.ProtoReflect.Descriptor instead.
func (*CalEPIcentralAngleResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{43}
}

func (x *CalEPIcentralAngleResponse) GetDelta() float32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type CalScalingDiameterConstantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalScalingDiameterConstantRequest) Reset() {
	*x = CalScalingDiameterConstantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalScalingDiameterConstantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalScalingDiameterConstantRequest) ProtoMessage() {}

func (x *CalScalingDiameterConstantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalScalingDiameterConstantRequest.ProtoReflect.Descriptor instead.
func (*CalScalingDiameterConstantRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{44}
}

func (x *CalScalingDiameterConstantRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalScalingDiameterConstantRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalScalingDiameterConstantRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalScalingDiameterConstantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cd   float32 `protobuf:"fixed32,1,opt,name=Cd,proto3" json:"Cd,omitempty"`
	Beta float32 `protobuf:"fixed32,2,opt,name=beta,proto3" json:"beta,omitempty"`
}

func (x *CalScalingDiameterConstantResponse) Reset() {
	*x = CalScalingDiameterConstantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalScalingDiameterConstantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalScalingDiameterConstantResponse) ProtoMessage() {}

func (x *CalScalingDiameterConstantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalScalingDiameterConstantResponse.ProtoReflect.Descriptor instead.
func (*CalScalingDiameterConstantResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{45}
}

func (x *CalScalingDiameterConstantResponse) GetCd() float32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *CalScalingDiameterConstantResponse) GetBeta() float32 {
	if x != nil {
		return x.Beta
	}
	return 0
}

type CalAnglefacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalAnglefacRequest) Reset() {
	*x = CalAnglefacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalAnglefacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalAnglefacRequest) ProtoMessage() {}

func (x *CalAnglefacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalAnglefacRequest.ProtoReflect.Descriptor instead.
func (*CalAnglefacRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{46}
}

func (x *CalAnglefacRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalAnglefacRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalAnglefacRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalAnglefacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anglefac float32 `protobuf:"fixed32,1,opt,name=anglefac,proto3" json:"anglefac,omitempty"`
}

func (x *CalAnglefacResponse) Reset() {
	*x = CalAnglefacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalAnglefacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalAnglefacResponse) ProtoMessage() {}

func (x *CalAnglefacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalAnglefacResponse.ProtoReflect.Descriptor instead.
func (*CalAnglefacResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{47}
}

func (x *CalAnglefacResponse) GetAnglefac() float32 {
	if x != nil {
		return x.Anglefac
	}
	return 0
}

type CalWdiameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Anglefac float32   `protobuf:"fixed32,3,opt,name=anglefac,proto3" json:"anglefac,omitempty"`
	Velocity float32   `protobuf:"fixed32,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalWdiameterRequest) Reset() {
	*x = CalWdiameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalWdiameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalWdiameterRequest) ProtoMessage() {}

func (x *CalWdiameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalWdiameterRequest.ProtoReflect.Descriptor instead.
func (*CalWdiameterRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{48}
}

func (x *CalWdiameterRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalWdiameterRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalWdiameterRequest) GetAnglefac() float32 {
	if x != nil {
		return x.Anglefac
	}
	return 0
}

func (x *CalWdiameterRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalWdiameterRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalWdiameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wdiameter float32 `protobuf:"fixed32,1,opt,name=wdiameter,proto3" json:"wdiameter,omitempty"`
}

func (x *CalWdiameterResponse) Reset() {
	*x = CalWdiameterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalWdiameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalWdiameterResponse) ProtoMessage() {}

func (x *CalWdiameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalWdiameterResponse.ProtoReflect.Descriptor instead.
func (*CalWdiameterResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{49}
}

func (x *CalWdiameterResponse) GetWdiameter() float32 {
	if x != nil {
		return x.Wdiameter
	}
	return 0
}

type CalTransientCraterDiameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor   *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets    *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Cd         float32   `protobuf:"fixed32,3,opt,name=cd,proto3" json:"cd,omitempty"`
	Beta       float32   `protobuf:"fixed32,4,opt,name=beta,proto3" json:"beta,omitempty"`
	Anglefac   float32   `protobuf:"fixed32,5,opt,name=anglefac,proto3" json:"anglefac,omitempty"`
	Vseafloor  float32   `protobuf:"fixed32,6,opt,name=vseafloor,proto3" json:"vseafloor,omitempty"`
	Dispersion float32   `protobuf:"fixed32,7,opt,name=dispersion,proto3" json:"dispersion,omitempty"`
	Choice     int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalTransientCraterDiameterRequest) Reset() {
	*x = CalTransientCraterDiameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalTransientCraterDiameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalTransientCraterDiameterRequest) ProtoMessage() {}

func (x *CalTransientCraterDiameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalTransientCraterDiameterRequest.ProtoReflect.Descriptor instead.
func (*CalTransientCraterDiameterRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{50}
}

func (x *CalTransientCraterDiameterRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalTransientCraterDiameterRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalTransientCraterDiameterRequest) GetCd() float32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *CalTransientCraterDiameterRequest) GetBeta() float32 {
	if x != nil {
		return x.Beta
	}
	return 0
}

func (x *CalTransientCraterDiameterRequest) GetAnglefac() float32 {
	if x != nil {
		return x.Anglefac
	}
	return 0
}

func (x *CalTransientCraterDiameterRequest) GetVseafloor() float32 {
	if x != nil {
		return x.Vseafloor
	}
	return 0
}

func (x *CalTransientCraterDiameterRequest) GetDispersion() float32 {
	if x != nil {
		return x.Dispersion
	}
	return 0
}

func (x *CalTransientCraterDiameterRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalTransientCraterDiameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtr float32 `protobuf:"fixed32,1,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
}

func (x *CalTransientCraterDiameterResponse) Reset() {
	*x = CalTransientCraterDiameterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalTransientCraterDiameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalTransientCraterDiameterResponse) ProtoMessage() {}

func (x *CalTransientCraterDiameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalTransientCraterDiameterResponse.ProtoReflect.Descriptor instead.
func (*CalTransientCraterDiameterResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{51}
}

func (x *CalTransientCraterDiameterResponse) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

type CalDepthrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr      float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalDepthrRequest) Reset() {
	*x = CalDepthrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDepthrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDepthrRequest) ProtoMessage() {}

func (x *CalDepthrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDepthrRequest.ProtoReflect.Descriptor instead.
func (*CalDepthrRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{52}
}

func (x *CalDepthrRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalDepthrRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalDepthrRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalDepthrRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalDepthrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depthr float32 `protobuf:"fixed32,1,opt,name=depthr,proto3" json:"depthr,omitempty"`
}

func (x *CalDepthrResponse) Reset() {
	*x = CalDepthrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDepthrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDepthrResponse) ProtoMessage() {}

func (x *CalDepthrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDepthrResponse.ProtoReflect.Descriptor instead.
func (*CalDepthrResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{53}
}

func (x *CalDepthrResponse) GetDepthr() float32 {
	if x != nil {
		return x.Depthr
	}
	return 0
}

type CalCdiamaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr      float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalCdiamaterRequest) Reset() {
	*x = CalCdiamaterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalCdiamaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalCdiamaterRequest) ProtoMessage() {}

func (x *CalCdiamaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalCdiamaterRequest.ProtoReflect.Descriptor instead.
func (*CalCdiamaterRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{54}
}

func (x *CalCdiamaterRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalCdiamaterRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalCdiamaterRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalCdiamaterRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalCdiamaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cdiameter float32 `protobuf:"fixed32,1,opt,name=cdiameter,proto3" json:"cdiameter,omitempty"`
}

func (x *CalCdiamaterResponse) Reset() {
	*x = CalCdiamaterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalCdiamaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalCdiamaterResponse) ProtoMessage() {}

func (x *CalCdiamaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalCdiamaterResponse.ProtoReflect.Descriptor instead.
func (*CalCdiamaterResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{55}
}

func (x *CalCdiamaterResponse) GetCdiameter() float32 {
	if x != nil {
		return x.Cdiameter
	}
	return 0
}

type CalDepthfrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr       float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Depthr    float32   `protobuf:"fixed32,4,opt,name=depthr,proto3" json:"depthr,omitempty"`
	Cdiameter float32   `protobuf:"fixed32,5,opt,name=cdiameter,proto3" json:"cdiameter,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalDepthfrRequest) Reset() {
	*x = CalDepthfrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDepthfrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDepthfrRequest) ProtoMessage() {}

func (x *CalDepthfrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDepthfrRequest.ProtoReflect.Descriptor instead.
func (*CalDepthfrRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{56}
}

func (x *CalDepthfrRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalDepthfrRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalDepthfrRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalDepthfrRequest) GetDepthr() float32 {
	if x != nil {
		return x.Depthr
	}
	return 0
}

func (x *CalDepthfrRequest) GetCdiameter() float32 {
	if x != nil {
		return x.Cdiameter
	}
	return 0
}

func (x *CalDepthfrRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalDepthfrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depthfr float32 `protobuf:"fixed32,1,opt,name=depthfr,proto3" json:"depthfr,omitempty"`
}

func (x *CalDepthfrResponse) Reset() {
	*x = CalDepthfrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDepthfrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDepthfrResponse) ProtoMessage() {}

func (x *CalDepthfrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDepthfrResponse.ProtoReflect.Descriptor instead.
func (*CalDepthfrResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{57}
}

func (x *CalDepthfrResponse) GetDepthfr() float32 {
	if x != nil {
		return x.Depthfr
	}
	return 0
}

type CalVCraterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr      float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVCraterRequest) Reset() {
	*x = CalVCraterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVCraterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVCraterRequest) ProtoMessage() {}

func (x *CalVCraterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVCraterRequest.ProtoReflect.Descriptor instead.
func (*CalVCraterRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{58}
}

func (x *CalVCraterRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVCraterRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVCraterRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalVCraterRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVCraterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCrater float32 `protobuf:"fixed32,1,opt,name=vCrater,proto3" json:"vCrater,omitempty"`
}

func (x *CalVCraterResponse) Reset() {
	*x = CalVCraterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVCraterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVCraterResponse) ProtoMessage() {}

func (x *CalVCraterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVCraterResponse.ProtoReflect.Descriptor instead.
func (*CalVCraterResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{59}
}

func (x *CalVCraterResponse) GetVCrater() float32 {
	if x != nil {
		return x.VCrater
	}
	return 0
}

type CalVratioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr      float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVratioRequest) Reset() {
	*x = CalVratioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVratioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVratioRequest) ProtoMessage() {}

func (x *CalVratioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVratioRequest.ProtoReflect.Descriptor instead.
func (*CalVratioRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{60}
}

func (x *CalVratioRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVratioRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVratioRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalVratioRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVratioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vratio float32 `protobuf:"fixed32,1,opt,name=vratio,proto3" json:"vratio,omitempty"`
}

func (x *CalVratioResponse) Reset() {
	*x = CalVratioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVratioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVratioResponse) ProtoMessage() {}

func (x *CalVratioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVratioResponse.ProtoReflect.Descriptor instead.
func (*CalVratioResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{61}
}

func (x *CalVratioResponse) GetVratio() float32 {
	if x != nil {
		return x.Vratio
	}
	return 0
}

type CalVCraterVRationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Dtr      float32   `protobuf:"fixed32,3,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVCraterVRationRequest) Reset() {
	*x = CalVCraterVRationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVCraterVRationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVCraterVRationRequest) ProtoMessage() {}

func (x *CalVCraterVRationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVCraterVRationRequest.ProtoReflect.Descriptor instead.
func (*CalVCraterVRationRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{62}
}

func (x *CalVCraterVRationRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVCraterVRationRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVCraterVRationRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalVCraterVRationRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVCraterVRationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCrater float32 `protobuf:"fixed32,1,opt,name=vCrater,proto3" json:"vCrater,omitempty"`
	Vratio  float32 `protobuf:"fixed32,2,opt,name=vratio,proto3" json:"vratio,omitempty"`
}

func (x *CalVCraterVRationResponse) Reset() {
	*x = CalVCraterVRationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVCraterVRationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVCraterVRationResponse) ProtoMessage() {}

func (x *CalVCraterVRationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVCraterVRationResponse.ProtoReflect.Descriptor instead.
func (*CalVCraterVRationResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{63}
}

func (x *CalVCraterVRationResponse) GetVCrater() float32 {
	if x != nil {
		return x.VCrater
	}
	return 0
}

func (x *CalVCraterVRationResponse) GetVratio() float32 {
	if x != nil {
		return x.Vratio
	}
	return 0
}

type CalVMeltRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor       *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets        *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Velocity       float32   `protobuf:"fixed32,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	EnergySeafloor float32   `protobuf:"fixed32,4,opt,name=energy_seafloor,json=energySeafloor,proto3" json:"energy_seafloor,omitempty"`
	Choice         int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVMeltRequest) Reset() {
	*x = CalVMeltRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVMeltRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVMeltRequest) ProtoMessage() {}

func (x *CalVMeltRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVMeltRequest.ProtoReflect.Descriptor instead.
func (*CalVMeltRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{64}
}

func (x *CalVMeltRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVMeltRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVMeltRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalVMeltRequest) GetEnergySeafloor() float32 {
	if x != nil {
		return x.EnergySeafloor
	}
	return 0
}

func (x *CalVMeltRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVMeltResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMelt float32 `protobuf:"fixed32,1,opt,name=vMelt,proto3" json:"vMelt,omitempty"`
}

func (x *CalVMeltResponse) Reset() {
	*x = CalVMeltResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVMeltResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVMeltResponse) ProtoMessage() {}

func (x *CalVMeltResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVMeltResponse.ProtoReflect.Descriptor instead.
func (*CalVMeltResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{65}
}

func (x *CalVMeltResponse) GetVMelt() float32 {
	if x != nil {
		return x.VMelt
	}
	return 0
}

type CalMratioAndMcratioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets  *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	VMelt    float32   `protobuf:"fixed32,3,opt,name=vMelt,proto3" json:"vMelt,omitempty"`
	VCrater  float32   `protobuf:"fixed32,4,opt,name=vCrater,proto3" json:"vCrater,omitempty"`
	Velocity float32   `protobuf:"fixed32,5,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Dtr      float32   `protobuf:"fixed32,6,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice   int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalMratioAndMcratioRequest) Reset() {
	*x = CalMratioAndMcratioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMratioAndMcratioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMratioAndMcratioRequest) ProtoMessage() {}

func (x *CalMratioAndMcratioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMratioAndMcratioRequest.ProtoReflect.Descriptor instead.
func (*CalMratioAndMcratioRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{66}
}

func (x *CalMratioAndMcratioRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalMratioAndMcratioRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalMratioAndMcratioRequest) GetVMelt() float32 {
	if x != nil {
		return x.VMelt
	}
	return 0
}

func (x *CalMratioAndMcratioRequest) GetVCrater() float32 {
	if x != nil {
		return x.VCrater
	}
	return 0
}

func (x *CalMratioAndMcratioRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalMratioAndMcratioRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalMratioAndMcratioRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalMratioAndMcratioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mratio  float32 `protobuf:"fixed32,1,opt,name=mratio,proto3" json:"mratio,omitempty"`
	Mcratio float32 `protobuf:"fixed32,2,opt,name=mcratio,proto3" json:"mcratio,omitempty"`
}

func (x *CalMratioAndMcratioResponse) Reset() {
	*x = CalMratioAndMcratioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMratioAndMcratioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMratioAndMcratioResponse) ProtoMessage() {}

func (x *CalMratioAndMcratioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMratioAndMcratioResponse.ProtoReflect.Descriptor instead.
func (*CalMratioAndMcratioResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{67}
}

func (x *CalMratioAndMcratioResponse) GetMratio() float32 {
	if x != nil {
		return x.Mratio
	}
	return 0
}

func (x *CalMratioAndMcratioResponse) GetMcratio() float32 {
	if x != nil {
		return x.Mcratio
	}
	return 0
}

type CalEjectArrivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEjectArrivalRequest) Reset() {
	*x = CalEjectArrivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEjectArrivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEjectArrivalRequest) ProtoMessage() {}

func (x *CalEjectArrivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEjectArrivalRequest.ProtoReflect.Descriptor instead.
func (*CalEjectArrivalRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{68}
}

func (x *CalEjectArrivalRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEjectArrivalRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEjectArrivalRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalEjectArrivalRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEjectArrivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EjectaArrival float32 `protobuf:"fixed32,1,opt,name=ejecta_arrival,json=ejectaArrival,proto3" json:"ejecta_arrival,omitempty"`
}

func (x *CalEjectArrivalResponse) Reset() {
	*x = CalEjectArrivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEjectArrivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEjectArrivalResponse) ProtoMessage() {}

func (x *CalEjectArrivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEjectArrivalResponse.ProtoReflect.Descriptor instead.
func (*CalEjectArrivalResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{69}
}

func (x *CalEjectArrivalResponse) GetEjectaArrival() float32 {
	if x != nil {
		return x.EjectaArrival
	}
	return 0
}

type CalEjectaThicknessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Dtr           float32   `protobuf:"fixed32,4,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalEjectaThicknessRequest) Reset() {
	*x = CalEjectaThicknessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEjectaThicknessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEjectaThicknessRequest) ProtoMessage() {}

func (x *CalEjectaThicknessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEjectaThicknessRequest.ProtoReflect.Descriptor instead.
func (*CalEjectaThicknessRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{70}
}

func (x *CalEjectaThicknessRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalEjectaThicknessRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalEjectaThicknessRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalEjectaThicknessRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalEjectaThicknessRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalEjectaThicknessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EjectaThickness float32 `protobuf:"fixed32,1,opt,name=ejecta_thickness,json=ejectaThickness,proto3" json:"ejecta_thickness,omitempty"`
}

func (x *CalEjectaThicknessResponse) Reset() {
	*x = CalEjectaThicknessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalEjectaThicknessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalEjectaThicknessResponse) ProtoMessage() {}

func (x *CalEjectaThicknessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalEjectaThicknessResponse.ProtoReflect.Descriptor instead.
func (*CalEjectaThicknessResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{71}
}

func (x *CalEjectaThicknessResponse) GetEjectaThickness() float32 {
	if x != nil {
		return x.EjectaThickness
	}
	return 0
}

type CalDFragRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Dtr           float32   `protobuf:"fixed32,4,opt,name=Dtr,proto3" json:"Dtr,omitempty"`
	Cdiameter     float32   `protobuf:"fixed32,5,opt,name=cdiameter,proto3" json:"cdiameter,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalDFragRequest) Reset() {
	*x = CalDFragRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDFragRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDFragRequest) ProtoMessage() {}

func (x *CalDFragRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDFragRequest.ProtoReflect.Descriptor instead.
func (*CalDFragRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{72}
}

func (x *CalDFragRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalDFragRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalDFragRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalDFragRequest) GetDtr() float32 {
	if x != nil {
		return x.Dtr
	}
	return 0
}

func (x *CalDFragRequest) GetCdiameter() float32 {
	if x != nil {
		return x.Cdiameter
	}
	return 0
}

func (x *CalDFragRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalDFragResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DFrag float32 `protobuf:"fixed32,1,opt,name=d_frag,json=dFrag,proto3" json:"d_frag,omitempty"`
}

func (x *CalDFragResponse) Reset() {
	*x = CalDFragResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDFragResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDFragResponse) ProtoMessage() {}

func (x *CalDFragResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDFragResponse.ProtoReflect.Descriptor instead.
func (*CalDFragResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{73}
}

func (x *CalDFragResponse) GetDFrag() float32 {
	if x != nil {
		return x.DFrag
	}
	return 0
}

type CalThemalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	EnergySurface float32   `protobuf:"fixed32,3,opt,name=energy_surface,json=energySurface,proto3" json:"energy_surface,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,4,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Delta         float32   `protobuf:"fixed32,5,opt,name=delta,proto3" json:"delta,omitempty"`
	Velocity      float32   `protobuf:"fixed32,6,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalThemalRequest) Reset() {
	*x = CalThemalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalThemalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalThemalRequest) ProtoMessage() {}

func (x *CalThemalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalThemalRequest.ProtoReflect.Descriptor instead.
func (*CalThemalRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{74}
}

func (x *CalThemalRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalThemalRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalThemalRequest) GetEnergySurface() float32 {
	if x != nil {
		return x.EnergySurface
	}
	return 0
}

func (x *CalThemalRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalThemalRequest) GetDelta() float32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *CalThemalRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *CalThemalRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalThemalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H               float32 `protobuf:"fixed32,1,opt,name=h,proto3" json:"h,omitempty"`
	Rf              float32 `protobuf:"fixed32,2,opt,name=Rf,proto3" json:"Rf,omitempty"`
	ThermalExposure float32 `protobuf:"fixed32,3,opt,name=thermal_exposure,json=thermalExposure,proto3" json:"thermal_exposure,omitempty"`
	NoRadiation     float32 `protobuf:"fixed32,4,opt,name=no_radiation,json=noRadiation,proto3" json:"no_radiation,omitempty"`
	MaxRadTime      float32 `protobuf:"fixed32,5,opt,name=max_rad_time,json=maxRadTime,proto3" json:"max_rad_time,omitempty"`
	IrradiationTime float32 `protobuf:"fixed32,6,opt,name=irradiation_time,json=irradiationTime,proto3" json:"irradiation_time,omitempty"`
	MegatonFactor   float32 `protobuf:"fixed32,7,opt,name=megaton_factor,json=megatonFactor,proto3" json:"megaton_factor,omitempty"`
	ThermalPower    float32 `protobuf:"fixed32,8,opt,name=thermal_power,json=thermalPower,proto3" json:"thermal_power,omitempty"`
}

func (x *CalThemalResponse) Reset() {
	*x = CalThemalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalThemalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalThemalResponse) ProtoMessage() {}

func (x *CalThemalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalThemalResponse.ProtoReflect.Descriptor instead.
func (*CalThemalResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{75}
}

func (x *CalThemalResponse) GetH() float32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *CalThemalResponse) GetRf() float32 {
	if x != nil {
		return x.Rf
	}
	return 0
}

func (x *CalThemalResponse) GetThermalExposure() float32 {
	if x != nil {
		return x.ThermalExposure
	}
	return 0
}

func (x *CalThemalResponse) GetNoRadiation() float32 {
	if x != nil {
		return x.NoRadiation
	}
	return 0
}

func (x *CalThemalResponse) GetMaxRadTime() float32 {
	if x != nil {
		return x.MaxRadTime
	}
	return 0
}

func (x *CalThemalResponse) GetIrradiationTime() float32 {
	if x != nil {
		return x.IrradiationTime
	}
	return 0
}

func (x *CalThemalResponse) GetMegatonFactor() float32 {
	if x != nil {
		return x.MegatonFactor
	}
	return 0
}

func (x *CalThemalResponse) GetThermalPower() float32 {
	if x != nil {
		return x.ThermalPower
	}
	return 0
}

type CalMagnitudeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor       *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets        *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst  float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	EnergySeafloor float32   `protobuf:"fixed32,4,opt,name=energy_seafloor,json=energySeafloor,proto3" json:"energy_seafloor,omitempty"`
	Choice         int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalMagnitudeRequest) Reset() {
	*x = CalMagnitudeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMagnitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMagnitudeRequest) ProtoMessage() {}

func (x *CalMagnitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMagnitudeRequest.ProtoReflect.Descriptor instead.
func (*CalMagnitudeRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{76}
}

func (x *CalMagnitudeRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalMagnitudeRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalMagnitudeRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalMagnitudeRequest) GetEnergySeafloor() float32 {
	if x != nil {
		return x.EnergySeafloor
	}
	return 0
}

func (x *CalMagnitudeRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalMagnitudeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Magnitude float32 `protobuf:"fixed32,1,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
}

func (x *CalMagnitudeResponse) Reset() {
	*x = CalMagnitudeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMagnitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMagnitudeResponse) ProtoMessage() {}

func (x *CalMagnitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMagnitudeResponse.ProtoReflect.Descriptor instead.
func (*CalMagnitudeResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{77}
}

func (x *CalMagnitudeResponse) GetMagnitude() float32 {
	if x != nil {
		return x.Magnitude
	}
	return 0
}

type CalMagnitude2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor       *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets        *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst  float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	EnergySeafloor float32   `protobuf:"fixed32,4,opt,name=energy_seafloor,json=energySeafloor,proto3" json:"energy_seafloor,omitempty"`
	Delta          float32   `protobuf:"fixed32,5,opt,name=delta,proto3" json:"delta,omitempty"`
	Choice         int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalMagnitude2Request) Reset() {
	*x = CalMagnitude2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMagnitude2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMagnitude2Request) ProtoMessage() {}

func (x *CalMagnitude2Request) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMagnitude2Request.ProtoReflect.Descriptor instead.
func (*CalMagnitude2Request) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{78}
}

func (x *CalMagnitude2Request) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalMagnitude2Request) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalMagnitude2Request) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalMagnitude2Request) GetEnergySeafloor() float32 {
	if x != nil {
		return x.EnergySeafloor
	}
	return 0
}

func (x *CalMagnitude2Request) GetDelta() float32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *CalMagnitude2Request) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalMagnitude2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffMag         float32 `protobuf:"fixed32,1,opt,name=eff_mag,json=effMag,proto3" json:"eff_mag,omitempty"`
	SeismicArrival float32 `protobuf:"fixed32,2,opt,name=seismic_arrival,json=seismicArrival,proto3" json:"seismic_arrival,omitempty"`
}

func (x *CalMagnitude2Response) Reset() {
	*x = CalMagnitude2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalMagnitude2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalMagnitude2Response) ProtoMessage() {}

func (x *CalMagnitude2Response) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalMagnitude2Response.ProtoReflect.Descriptor instead.
func (*CalMagnitude2Response) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{79}
}

func (x *CalMagnitude2Response) GetEffMag() float32 {
	if x != nil {
		return x.EffMag
	}
	return 0
}

func (x *CalMagnitude2Response) GetSeismicArrival() float32 {
	if x != nil {
		return x.SeismicArrival
	}
	return 0
}

type CalShockArrivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,3,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalShockArrivalRequest) Reset() {
	*x = CalShockArrivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalShockArrivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalShockArrivalRequest) ProtoMessage() {}

func (x *CalShockArrivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalShockArrivalRequest.ProtoReflect.Descriptor instead.
func (*CalShockArrivalRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{80}
}

func (x *CalShockArrivalRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalShockArrivalRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalShockArrivalRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalShockArrivalRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalShockArrivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShockArrival float32 `protobuf:"fixed32,1,opt,name=shock_arrival,json=shockArrival,proto3" json:"shock_arrival,omitempty"`
}

func (x *CalShockArrivalResponse) Reset() {
	*x = CalShockArrivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalShockArrivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalShockArrivalResponse) ProtoMessage() {}

func (x *CalShockArrivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalShockArrivalResponse.ProtoReflect.Descriptor instead.
func (*CalShockArrivalResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{81}
}

func (x *CalShockArrivalResponse) GetShockArrival() float32 {
	if x != nil {
		return x.ShockArrival
	}
	return 0
}

type CalVmaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	EnergyBlast   float32   `protobuf:"fixed32,3,opt,name=energy_blast,json=energyBlast,proto3" json:"energy_blast,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,4,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalVmaxRequest) Reset() {
	*x = CalVmaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVmaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVmaxRequest) ProtoMessage() {}

func (x *CalVmaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVmaxRequest.ProtoReflect.Descriptor instead.
func (*CalVmaxRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{82}
}

func (x *CalVmaxRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalVmaxRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalVmaxRequest) GetEnergyBlast() float32 {
	if x != nil {
		return x.EnergyBlast
	}
	return 0
}

func (x *CalVmaxRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalVmaxRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalVmaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmax      float32 `protobuf:"fixed32,1,opt,name=vmax,proto3" json:"vmax,omitempty"`
	Opressure float32 `protobuf:"fixed32,2,opt,name=opressure,proto3" json:"opressure,omitempty"`
}

func (x *CalVmaxResponse) Reset() {
	*x = CalVmaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalVmaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalVmaxResponse) ProtoMessage() {}

func (x *CalVmaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalVmaxResponse.ProtoReflect.Descriptor instead.
func (*CalVmaxResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{83}
}

func (x *CalVmaxResponse) GetVmax() float32 {
	if x != nil {
		return x.Vmax
	}
	return 0
}

func (x *CalVmaxResponse) GetOpressure() float32 {
	if x != nil {
		return x.Opressure
	}
	return 0
}

type CalShockDamageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Opressure float32   `protobuf:"fixed32,3,opt,name=opressure,proto3" json:"opressure,omitempty"`
	Vmax      float32   `protobuf:"fixed32,4,opt,name=vmax,proto3" json:"vmax,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalShockDamageRequest) Reset() {
	*x = CalShockDamageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalShockDamageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalShockDamageRequest) ProtoMessage() {}

func (x *CalShockDamageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalShockDamageRequest.ProtoReflect.Descriptor instead.
func (*CalShockDamageRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{84}
}

func (x *CalShockDamageRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalShockDamageRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalShockDamageRequest) GetOpressure() float32 {
	if x != nil {
		return x.Opressure
	}
	return 0
}

func (x *CalShockDamageRequest) GetVmax() float32 {
	if x != nil {
		return x.Vmax
	}
	return 0
}

func (x *CalShockDamageRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalShockDamageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShockDamage string `protobuf:"bytes,1,opt,name=shock_damage,json=shockDamage,proto3" json:"shock_damage,omitempty"`
}

func (x *CalShockDamageResponse) Reset() {
	*x = CalShockDamageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalShockDamageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalShockDamageResponse) ProtoMessage() {}

func (x *CalShockDamageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalShockDamageResponse.ProtoReflect.Descriptor instead.
func (*CalShockDamageResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{85}
}

func (x *CalShockDamageResponse) GetShockDamage() string {
	if x != nil {
		return x.ShockDamage
	}
	return ""
}

type CalDecLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor      *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets       *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	EnergyBlast   float32   `protobuf:"fixed32,3,opt,name=energy_blast,json=energyBlast,proto3" json:"energy_blast,omitempty"`
	AltitudeBurst float32   `protobuf:"fixed32,4,opt,name=altitudeBurst,proto3" json:"altitudeBurst,omitempty"`
	Choice        int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *CalDecLevelRequest) Reset() {
	*x = CalDecLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDecLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDecLevelRequest) ProtoMessage() {}

func (x *CalDecLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDecLevelRequest.ProtoReflect.Descriptor instead.
func (*CalDecLevelRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{86}
}

func (x *CalDecLevelRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *CalDecLevelRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CalDecLevelRequest) GetEnergyBlast() float32 {
	if x != nil {
		return x.EnergyBlast
	}
	return 0
}

func (x *CalDecLevelRequest) GetAltitudeBurst() float32 {
	if x != nil {
		return x.AltitudeBurst
	}
	return 0
}

func (x *CalDecLevelRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type CalDecLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecLevel float32 `protobuf:"fixed32,1,opt,name=dec_level,json=decLevel,proto3" json:"dec_level,omitempty"`
}

func (x *CalDecLevelResponse) Reset() {
	*x = CalDecLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalDecLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalDecLevelResponse) ProtoMessage() {}

func (x *CalDecLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalDecLevelResponse.ProtoReflect.Descriptor instead.
func (*CalDecLevelResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{87}
}

func (x *CalDecLevelResponse) GetDecLevel() float32 {
	if x != nil {
		return x.DecLevel
	}
	return 0
}

type Cal_TsunamiArrivalTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Wdiameter float32   `protobuf:"fixed32,3,opt,name=wdiameter,proto3" json:"wdiameter,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Cal_TsunamiArrivalTimeRequest) Reset() {
	*x = Cal_TsunamiArrivalTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_TsunamiArrivalTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_TsunamiArrivalTimeRequest) ProtoMessage() {}

func (x *Cal_TsunamiArrivalTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_TsunamiArrivalTimeRequest.ProtoReflect.Descriptor instead.
func (*Cal_TsunamiArrivalTimeRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{88}
}

func (x *Cal_TsunamiArrivalTimeRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *Cal_TsunamiArrivalTimeRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Cal_TsunamiArrivalTimeRequest) GetWdiameter() float32 {
	if x != nil {
		return x.Wdiameter
	}
	return 0
}

func (x *Cal_TsunamiArrivalTimeRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type Cal_TsunamiArrivalTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsunamiArrivalTime float32 `protobuf:"fixed32,1,opt,name=TsunamiArrivalTime,proto3" json:"TsunamiArrivalTime,omitempty"`
}

func (x *Cal_TsunamiArrivalTimeResponse) Reset() {
	*x = Cal_TsunamiArrivalTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_TsunamiArrivalTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_TsunamiArrivalTimeResponse) ProtoMessage() {}

func (x *Cal_TsunamiArrivalTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_TsunamiArrivalTimeResponse.ProtoReflect.Descriptor instead.
func (*Cal_TsunamiArrivalTimeResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{89}
}

func (x *Cal_TsunamiArrivalTimeResponse) GetTsunamiArrivalTime() float32 {
	if x != nil {
		return x.TsunamiArrivalTime
	}
	return 0
}

type Cal_WaveAmplitudeUpperLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Wdiameter float32   `protobuf:"fixed32,3,opt,name=wdiameter,proto3" json:"wdiameter,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) Reset() {
	*x = Cal_WaveAmplitudeUpperLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_WaveAmplitudeUpperLimitRequest) ProtoMessage() {}

func (x *Cal_WaveAmplitudeUpperLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_WaveAmplitudeUpperLimitRequest.ProtoReflect.Descriptor instead.
func (*Cal_WaveAmplitudeUpperLimitRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{90}
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) GetWdiameter() float32 {
	if x != nil {
		return x.Wdiameter
	}
	return 0
}

func (x *Cal_WaveAmplitudeUpperLimitRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type Cal_WaveAmplitudeUpperLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaveAmplitudeUpperLimit float32 `protobuf:"fixed32,1,opt,name=WaveAmplitudeUpperLimit,proto3" json:"WaveAmplitudeUpperLimit,omitempty"`
}

func (x *Cal_WaveAmplitudeUpperLimitResponse) Reset() {
	*x = Cal_WaveAmplitudeUpperLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_WaveAmplitudeUpperLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_WaveAmplitudeUpperLimitResponse) ProtoMessage() {}

func (x *Cal_WaveAmplitudeUpperLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_WaveAmplitudeUpperLimitResponse.ProtoReflect.Descriptor instead.
func (*Cal_WaveAmplitudeUpperLimitResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{91}
}

func (x *Cal_WaveAmplitudeUpperLimitResponse) GetWaveAmplitudeUpperLimit() float32 {
	if x != nil {
		return x.WaveAmplitudeUpperLimit
	}
	return 0
}

type Cal_WaveAmplitudeLowerLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impactor  *Impactor `protobuf:"bytes,1,opt,name=impactor,proto3" json:"impactor,omitempty"`
	Targets   *Targets  `protobuf:"bytes,2,opt,name=targets,proto3" json:"targets,omitempty"`
	Wdiameter float32   `protobuf:"fixed32,3,opt,name=wdiameter,proto3" json:"wdiameter,omitempty"`
	Choice    int32     `protobuf:"varint,256,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) Reset() {
	*x = Cal_WaveAmplitudeLowerLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_WaveAmplitudeLowerLimitRequest) ProtoMessage() {}

func (x *Cal_WaveAmplitudeLowerLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_WaveAmplitudeLowerLimitRequest.ProtoReflect.Descriptor instead.
func (*Cal_WaveAmplitudeLowerLimitRequest) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{92}
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) GetImpactor() *Impactor {
	if x != nil {
		return x.Impactor
	}
	return nil
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) GetWdiameter() float32 {
	if x != nil {
		return x.Wdiameter
	}
	return 0
}

func (x *Cal_WaveAmplitudeLowerLimitRequest) GetChoice() int32 {
	if x != nil {
		return x.Choice
	}
	return 0
}

type Cal_WaveAmplitudeLowerLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaveAmplitudeLowerLimit float32 `protobuf:"fixed32,1,opt,name=WaveAmplitudeLowerLimit,proto3" json:"WaveAmplitudeLowerLimit,omitempty"`
}

func (x *Cal_WaveAmplitudeLowerLimitResponse) Reset() {
	*x = Cal_WaveAmplitudeLowerLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_impactEffect_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cal_WaveAmplitudeLowerLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cal_WaveAmplitudeLowerLimitResponse) ProtoMessage() {}

func (x *Cal_WaveAmplitudeLowerLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_impactEffect_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cal_WaveAmplitudeLowerLimitResponse.ProtoReflect.Descriptor instead.
func (*Cal_WaveAmplitudeLowerLimitResponse) Descriptor() ([]byte, []int) {
	return file_impactEffect_proto_rawDescGZIP(), []int{93}
}

func (x *Cal_WaveAmplitudeLowerLimitResponse) GetWaveAmplitudeLowerLimit() float32 {
	if x != nil {
		return x.WaveAmplitudeLowerLimit
	}
	return 0
}

var File_impactEffect_proto protoreflect.FileDescriptor

var file_impactEffect_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x22, 0x72, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x22, 0xdc, 0x03, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x68, 0x6f, 0x53, 0x75, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x68, 0x6f, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x67, 0x43, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x72, 0x61, 0x67, 0x43, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x61, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x61, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x45, 0x61, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x70, 0x45, 0x61, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x45, 0x61, 0x72, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x45, 0x61, 0x72, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x45, 0x61, 0x72, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x6c, 0x45, 0x61, 0x72, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x52, 0x5f, 0x65, 0x61, 0x72, 0x74, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x52, 0x45, 0x61, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x57, 0x61,
	0x76, 0x65, 0x56, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x65, 0x6c, 0x74, 0x43, 0x6f, 0x65,
	0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x45, 0x61, 0x72, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x45, 0x61, 0x72, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x50, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x65, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x65, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x44, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0x5d, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x11, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x22, 0x68, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x44, 0x0a,
	0x1b, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x22, 0x71, 0x0a, 0x23, 0x63, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x24, 0x63, 0x61, 0x6c, 0x5f, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x61, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x1f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x41, 0x74, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x1b,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x73, 0x49, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x3e, 0x0a, 0x1c, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x55, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x55,
	0x22, 0xcb, 0x01, 0x0a, 0x1b, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x61, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x55, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3a,
	0x0a, 0x1c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x55, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x20,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x61,
	0x69, 0x72, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x1a, 0x61, 0x69, 0x72, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x22, 0x88, 0x02, 0x0a,
	0x16, 0x62, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x55,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x42, 0x55, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x42, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x76, 0x42, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x17, 0x62, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x81,
	0x02, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x75,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x42, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x41, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4f, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6c, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x18, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4d, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61,
	0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x6d,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x22,
	0x8f, 0x02, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x41, 0x74,
	0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x6d, 0x0a, 0x21, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x1a,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x1f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x40, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x73,
	0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76,
	0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4a, 0x0a, 0x1f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x61, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73,
	0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x22, 0x9c, 0x01,
	0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50, 0x49, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x1d,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50, 0x49, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x25, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x26, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x43, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x33, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x66, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x66, 0x61, 0x63, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xa3, 0x02,
	0x0a, 0x25, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x63, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x76, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x26, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x44, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x17, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64,
	0x69, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x36, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x66, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f,
	0x76, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x43, 0x72, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x72, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x44, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12,
	0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f,
	0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x5f,
	0x76, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x44, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x17,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x43, 0x72, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x63, 0x61,
	0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x4d, 0x65, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x22, 0xfc,
	0x01, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x63, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76,
	0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x44, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x53, 0x0a,
	0x1f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x63, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x63, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x63, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x43, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x61, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x63, 0x61,
	0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4a, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x61, 0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xe8, 0x01, 0x0a,
	0x12, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x44, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x74, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x64, 0x46, 0x72, 0x61, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x68,
	0x65, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x13, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x52, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x52, 0x66, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x6e, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x72, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x65, 0x61, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a,
	0x16, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x65, 0x61, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x32, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x65, 0x66, 0x66, 0x4d, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x69, 0x73, 0x6d,
	0x69, 0x63, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x73, 0x65, 0x69, 0x73, 0x6d, 0x69, 0x63, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x22, 0xbf, 0x01, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x41, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x41, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x42, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x45, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x61, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbc, 0x01,
	0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x5f, 0x54, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x1f,
	0x63, 0x61, 0x6c, 0x5f, 0x54, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x54, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x54, 0x73, 0x75,
	0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x23, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x24, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41,
	0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x57,
	0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x57, 0x61,
	0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x23, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61,
	0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x24, 0x63, 0x61, 0x6c,
	0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x17, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0xe0, 0x25, 0x0a, 0x13,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x12,
	0x1e, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x28, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x86, 0x01, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77,
	0x0a, 0x16, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x12, 0x29,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x12, 0x29,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x69, 0x72, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x69, 0x72, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x61, 0x69, 0x72, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0e, 0x62, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x62,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x62, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77,
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x12,
	0x2a, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x15, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x6d,
	0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x2b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61,
	0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x2e, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x17, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50, 0x49, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50,
	0x49, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x50, 0x49, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x66, 0x61, 0x63, 0x12, 0x22, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x61, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x66, 0x61, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01,
	0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64, 0x69, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x64, 0x69, 0x61, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x12, 0x21,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x66, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x20, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x5f, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x76, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x76, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c,
	0x74, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x4d, 0x65, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x63, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x2c, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d,
	0x63, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x63, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6c, 0x12,
	0x20, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x32, 0x12, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x32, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f,
	0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x61, 0x78, 0x12, 0x1e, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x10, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x5f, 0x54, 0x73, 0x75, 0x6e, 0x61,
	0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x2e,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c,
	0x5f, 0x54, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x54,
	0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x1b, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f,
	0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61,
	0x76, 0x65, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65, 0x41, 0x6d, 0x70,
	0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x61, 0x6c, 0x5f, 0x57, 0x61, 0x76, 0x65,
	0x41, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32,
	0x5a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_impactEffect_proto_rawDescOnce sync.Once
	file_impactEffect_proto_rawDescData = file_impactEffect_proto_rawDesc
)

func file_impactEffect_proto_rawDescGZIP() []byte {
	file_impactEffect_proto_rawDescOnce.Do(func() {
		file_impactEffect_proto_rawDescData = protoimpl.X.CompressGZIP(file_impactEffect_proto_rawDescData)
	})
	return file_impactEffect_proto_rawDescData
}

var file_impactEffect_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_impactEffect_proto_goTypes = []interface{}{
	(*Impactor)(nil),                            // 0: impactEffect.Impactor
	(*Targets)(nil),                             // 1: impactEffect.Targets
	(*ExampleRequest)(nil),                      // 2: impactEffect.example_request
	(*ExampleResponse)(nil),                     // 3: impactEffect.example_response
	(*CalMassRequest)(nil),                      // 4: impactEffect.cal_mass_request
	(*CalMassResponse)(nil),                     // 5: impactEffect.cal_mass_response
	(*Cal_KineticEnergyRequest)(nil),            // 6: impactEffect.cal_Kinetic_energy_request
	(*Cal_KineticEnergyResponse)(nil),           // 7: impactEffect.cal_Kinetic_energy_response
	(*CalKineticEnergyMegatonsRequest)(nil),     // 8: impactEffect.cal_kinetic_energy_megatons_request
	(*CalKineticEnergyMegatonsResponse)(nil),    // 9: impactEffect.cal_kinetic_energy_megatons_response
	(*CalRecTimeRequest)(nil),                   // 10: impactEffect.cal_rec_time_request
	(*CalRecTimeResponse)(nil),                  // 11: impactEffect.cal_rec_time_response
	(*CalIFactorRequest)(nil),                   // 12: impactEffect.cal_i_factor_request
	(*CalIFactorResponse)(nil),                  // 13: impactEffect.cal_i_factor_response
	(*BurstVelocityAtZeroRequest)(nil),          // 14: impactEffect.burst_velocity_at_zero_request
	(*BurstVelocityAtZeroResponse)(nil),         // 15: impactEffect.burst_velocity_at_zero_response
	(*AltitudeOfBreakupRequest)(nil),            // 16: impactEffect.altitude_of_breakup_request
	(*AltitudeOfBreakupResponse)(nil),           // 17: impactEffect.altitude_of_breakup_response
	(*VelocityAtBreakupRequest)(nil),            // 18: impactEffect.velocity_at_breakup_request
	(*VelocityAtBreakupResponse)(nil),           // 19: impactEffect.velocity_at_breakup_response
	(*DispersionLengthScaleRequest)(nil),        // 20: impactEffect.dispersion_length_scale_request
	(*DispersionLengthScaleResponse)(nil),       // 21: impactEffect.dispersion_length_scale_response
	(*AirburstAltitudeRequest)(nil),             // 22: impactEffect.airburst_altitude_request
	(*AirburstAltitudeResponse)(nil),            // 23: impactEffect.airburst_altitude_response
	(*BrustVelocityRequest)(nil),                // 24: impactEffect.brust_velocity_request
	(*BrustVelocityResponse)(nil),               // 25: impactEffect.brust_velocity_response
	(*DispersionOfImpactorRequest)(nil),         // 26: impactEffect.dispersion_of_impactor_request
	(*DispersionOfImpactorResponse)(nil),        // 27: impactEffect.dispersion_of_impactor_response
	(*FractionOfMomentumRequest)(nil),           // 28: impactEffect.fraction_of_momentum_request
	(*FractionOfMomentumResponse)(nil),          // 29: impactEffect.fraction_of_momentum_response
	(*CalTrotChangeRequest)(nil),                // 30: impactEffect.cal_trot_change_request
	(*CalTrotChangeResponse)(nil),               // 31: impactEffect.cal_trot_change_response
	(*CalEnergyAtmosphereRequest)(nil),          // 32: impactEffect.cal_energy_atmosphere_request
	(*CalEnergyAtmosphereResponse)(nil),         // 33: impactEffect.cal_energy_atmosphere_response
	(*CalEnergyBlastSurfaceRequest)(nil),        // 34: impactEffect.cal_energy_blast_surface_request
	(*CalEnergyBlastSurfaceResponse)(nil),       // 35: impactEffect.cal_energy_blast_surface_response
	(*CalMassOfWaterRequest)(nil),               // 36: impactEffect.cal_mass_of_water_request
	(*CalMassOfWaterResponse)(nil),              // 37: impactEffect.cal_mass_of_water_response
	(*CalVelocityProjectileRequest)(nil),        // 38: impactEffect.cal_velocity_projectile_request
	(*CalVelocityProjectileResponse)(nil),       // 39: impactEffect.cal_velocity_projectile_response
	(*CalEnergyAtSeafloorRequest)(nil),          // 40: impactEffect.cal_energy_at_seafloor_request
	(*CalEnergyAtSeafloorResponse)(nil),         // 41: impactEffect.cal_energy_at_seafloor_response
	(*CalEPIcentralAngleRequest)(nil),           // 42: impactEffect.cal_ePIcentral_angle_request
	(*CalEPIcentralAngleResponse)(nil),          // 43: impactEffect.cal_ePIcentral_angle_response
	(*CalScalingDiameterConstantRequest)(nil),   // 44: impactEffect.cal_scaling_diameter_constant_request
	(*CalScalingDiameterConstantResponse)(nil),  // 45: impactEffect.cal_scaling_diameter_constant_response
	(*CalAnglefacRequest)(nil),                  // 46: impactEffect.cal_anglefac_request
	(*CalAnglefacResponse)(nil),                 // 47: impactEffect.cal_anglefac_response
	(*CalWdiameterRequest)(nil),                 // 48: impactEffect.cal_wdiameter_request
	(*CalWdiameterResponse)(nil),                // 49: impactEffect.cal_wdiameter_response
	(*CalTransientCraterDiameterRequest)(nil),   // 50: impactEffect.cal_transient_crater_diameter_request
	(*CalTransientCraterDiameterResponse)(nil),  // 51: impactEffect.cal_transient_crater_diameter_response
	(*CalDepthrRequest)(nil),                    // 52: impactEffect.cal_depthr_request
	(*CalDepthrResponse)(nil),                   // 53: impactEffect.cal_depthr_response
	(*CalCdiamaterRequest)(nil),                 // 54: impactEffect.cal_cdiamater_request
	(*CalCdiamaterResponse)(nil),                // 55: impactEffect.cal_cdiamater_response
	(*CalDepthfrRequest)(nil),                   // 56: impactEffect.cal_depthfr_request
	(*CalDepthfrResponse)(nil),                  // 57: impactEffect.cal_depthfr_response
	(*CalVCraterRequest)(nil),                   // 58: impactEffect.cal_vCrater_request
	(*CalVCraterResponse)(nil),                  // 59: impactEffect.cal_vCrater_response
	(*CalVratioRequest)(nil),                    // 60: impactEffect.cal_vratio_request
	(*CalVratioResponse)(nil),                   // 61: impactEffect.cal_vratio_response
	(*CalVCraterVRationRequest)(nil),            // 62: impactEffect.cal_vCrater_vRation_request
	(*CalVCraterVRationResponse)(nil),           // 63: impactEffect.cal_vCrater_vRation_response
	(*CalVMeltRequest)(nil),                     // 64: impactEffect.cal_vMelt_request
	(*CalVMeltResponse)(nil),                    // 65: impactEffect.cal_vMelt_response
	(*CalMratioAndMcratioRequest)(nil),          // 66: impactEffect.cal_mratio_and_mcratio_request
	(*CalMratioAndMcratioResponse)(nil),         // 67: impactEffect.cal_mratio_and_mcratio_response
	(*CalEjectArrivalRequest)(nil),              // 68: impactEffect.cal_eject_arrival_request
	(*CalEjectArrivalResponse)(nil),             // 69: impactEffect.cal_eject_arrival_response
	(*CalEjectaThicknessRequest)(nil),           // 70: impactEffect.cal_ejecta_thickness_request
	(*CalEjectaThicknessResponse)(nil),          // 71: impactEffect.cal_ejecta_thickness_response
	(*CalDFragRequest)(nil),                     // 72: impactEffect.cal_d_frag_request
	(*CalDFragResponse)(nil),                    // 73: impactEffect.cal_d_frag_response
	(*CalThemalRequest)(nil),                    // 74: impactEffect.cal_themal_request
	(*CalThemalResponse)(nil),                   // 75: impactEffect.cal_themal_response
	(*CalMagnitudeRequest)(nil),                 // 76: impactEffect.cal_magnitude_request
	(*CalMagnitudeResponse)(nil),                // 77: impactEffect.cal_magnitude_response
	(*CalMagnitude2Request)(nil),                // 78: impactEffect.cal_magnitude2_request
	(*CalMagnitude2Response)(nil),               // 79: impactEffect.cal_magnitude2_response
	(*CalShockArrivalRequest)(nil),              // 80: impactEffect.cal_shock_arrival_request
	(*CalShockArrivalResponse)(nil),             // 81: impactEffect.cal_shock_arrival_response
	(*CalVmaxRequest)(nil),                      // 82: impactEffect.cal_vmax_request
	(*CalVmaxResponse)(nil),                     // 83: impactEffect.cal_vmax_response
	(*CalShockDamageRequest)(nil),               // 84: impactEffect.cal_shock_damage_request
	(*CalShockDamageResponse)(nil),              // 85: impactEffect.cal_shock_damage_response
	(*CalDecLevelRequest)(nil),                  // 86: impactEffect.cal_dec_level_request
	(*CalDecLevelResponse)(nil),                 // 87: impactEffect.cal_dec_level_response
	(*Cal_TsunamiArrivalTimeRequest)(nil),       // 88: impactEffect.cal_TsunamiArrivalTime_request
	(*Cal_TsunamiArrivalTimeResponse)(nil),      // 89: impactEffect.cal_TsunamiArrivalTime_response
	(*Cal_WaveAmplitudeUpperLimitRequest)(nil),  // 90: impactEffect.cal_WaveAmplitudeUpperLimit_request
	(*Cal_WaveAmplitudeUpperLimitResponse)(nil), // 91: impactEffect.cal_WaveAmplitudeUpperLimit_response
	(*Cal_WaveAmplitudeLowerLimitRequest)(nil),  // 92: impactEffect.cal_WaveAmplitudeLowerLimit_request
	(*Cal_WaveAmplitudeLowerLimitResponse)(nil), // 93: impactEffect.cal_WaveAmplitudeLowerLimit_response
}
var file_impactEffect_proto_depIdxs = []int32{
	0,   // 0: impactEffect.example_request.impactor:type_name -> impactEffect.Impactor
	0,   // 1: impactEffect.cal_mass_request.impactor:type_name -> impactEffect.Impactor
	0,   // 2: impactEffect.cal_Kinetic_energy_request.impactor:type_name -> impactEffect.Impactor
	0,   // 3: impactEffect.cal_kinetic_energy_megatons_request.impactor:type_name -> impactEffect.Impactor
	0,   // 4: impactEffect.cal_rec_time_request.impactor:type_name -> impactEffect.Impactor
	0,   // 5: impactEffect.cal_i_factor_request.impactor:type_name -> impactEffect.Impactor
	1,   // 6: impactEffect.cal_i_factor_request.targets:type_name -> impactEffect.Targets
	0,   // 7: impactEffect.burst_velocity_at_zero_request.impactor:type_name -> impactEffect.Impactor
	1,   // 8: impactEffect.burst_velocity_at_zero_request.targets:type_name -> impactEffect.Targets
	0,   // 9: impactEffect.altitude_of_breakup_request.impactor:type_name -> impactEffect.Impactor
	1,   // 10: impactEffect.altitude_of_breakup_request.targets:type_name -> impactEffect.Targets
	0,   // 11: impactEffect.velocity_at_breakup_request.impactor:type_name -> impactEffect.Impactor
	1,   // 12: impactEffect.velocity_at_breakup_request.targets:type_name -> impactEffect.Targets
	0,   // 13: impactEffect.dispersion_length_scale_request.impactor:type_name -> impactEffect.Impactor
	1,   // 14: impactEffect.dispersion_length_scale_request.targets:type_name -> impactEffect.Targets
	0,   // 15: impactEffect.airburst_altitude_request.impactor:type_name -> impactEffect.Impactor
	1,   // 16: impactEffect.airburst_altitude_request.targets:type_name -> impactEffect.Targets
	0,   // 17: impactEffect.brust_velocity_request.impactor:type_name -> impactEffect.Impactor
	1,   // 18: impactEffect.brust_velocity_request.targets:type_name -> impactEffect.Targets
	0,   // 19: impactEffect.dispersion_of_impactor_request.impactor:type_name -> impactEffect.Impactor
	1,   // 20: impactEffect.dispersion_of_impactor_request.targets:type_name -> impactEffect.Targets
	0,   // 21: impactEffect.fraction_of_momentum_request.impactor:type_name -> impactEffect.Impactor
	1,   // 22: impactEffect.fraction_of_momentum_request.targets:type_name -> impactEffect.Targets
	0,   // 23: impactEffect.cal_trot_change_request.impactor:type_name -> impactEffect.Impactor
	1,   // 24: impactEffect.cal_trot_change_request.targets:type_name -> impactEffect.Targets
	0,   // 25: impactEffect.cal_energy_atmosphere_request.impactor:type_name -> impactEffect.Impactor
	1,   // 26: impactEffect.cal_energy_atmosphere_request.targets:type_name -> impactEffect.Targets
	0,   // 27: impactEffect.cal_energy_blast_surface_request.impactor:type_name -> impactEffect.Impactor
	1,   // 28: impactEffect.cal_energy_blast_surface_request.targets:type_name -> impactEffect.Targets
	0,   // 29: impactEffect.cal_mass_of_water_request.impactor:type_name -> impactEffect.Impactor
	1,   // 30: impactEffect.cal_mass_of_water_request.targets:type_name -> impactEffect.Targets
	0,   // 31: impactEffect.cal_velocity_projectile_request.impactor:type_name -> impactEffect.Impactor
	1,   // 32: impactEffect.cal_velocity_projectile_request.targets:type_name -> impactEffect.Targets
	0,   // 33: impactEffect.cal_energy_at_seafloor_request.impactor:type_name -> impactEffect.Impactor
	1,   // 34: impactEffect.cal_energy_at_seafloor_request.targets:type_name -> impactEffect.Targets
	0,   // 35: impactEffect.cal_ePIcentral_angle_request.impactor:type_name -> impactEffect.Impactor
	1,   // 36: impactEffect.cal_ePIcentral_angle_request.targets:type_name -> impactEffect.Targets
	0,   // 37: impactEffect.cal_scaling_diameter_constant_request.impactor:type_name -> impactEffect.Impactor
	1,   // 38: impactEffect.cal_scaling_diameter_constant_request.targets:type_name -> impactEffect.Targets
	0,   // 39: impactEffect.cal_anglefac_request.impactor:type_name -> impactEffect.Impactor
	1,   // 40: impactEffect.cal_anglefac_request.targets:type_name -> impactEffect.Targets
	0,   // 41: impactEffect.cal_wdiameter_request.impactor:type_name -> impactEffect.Impactor
	1,   // 42: impactEffect.cal_wdiameter_request.targets:type_name -> impactEffect.Targets
	0,   // 43: impactEffect.cal_transient_crater_diameter_request.impactor:type_name -> impactEffect.Impactor
	1,   // 44: impactEffect.cal_transient_crater_diameter_request.targets:type_name -> impactEffect.Targets
	0,   // 45: impactEffect.cal_depthr_request.impactor:type_name -> impactEffect.Impactor
	1,   // 46: impactEffect.cal_depthr_request.targets:type_name -> impactEffect.Targets
	0,   // 47: impactEffect.cal_cdiamater_request.impactor:type_name -> impactEffect.Impactor
	1,   // 48: impactEffect.cal_cdiamater_request.targets:type_name -> impactEffect.Targets
	0,   // 49: impactEffect.cal_depthfr_request.impactor:type_name -> impactEffect.Impactor
	1,   // 50: impactEffect.cal_depthfr_request.targets:type_name -> impactEffect.Targets
	0,   // 51: impactEffect.cal_vCrater_request.impactor:type_name -> impactEffect.Impactor
	1,   // 52: impactEffect.cal_vCrater_request.targets:type_name -> impactEffect.Targets
	0,   // 53: impactEffect.cal_vratio_request.impactor:type_name -> impactEffect.Impactor
	1,   // 54: impactEffect.cal_vratio_request.targets:type_name -> impactEffect.Targets
	0,   // 55: impactEffect.cal_vCrater_vRation_request.impactor:type_name -> impactEffect.Impactor
	1,   // 56: impactEffect.cal_vCrater_vRation_request.targets:type_name -> impactEffect.Targets
	0,   // 57: impactEffect.cal_vMelt_request.impactor:type_name -> impactEffect.Impactor
	1,   // 58: impactEffect.cal_vMelt_request.targets:type_name -> impactEffect.Targets
	0,   // 59: impactEffect.cal_mratio_and_mcratio_request.impactor:type_name -> impactEffect.Impactor
	1,   // 60: impactEffect.cal_mratio_and_mcratio_request.targets:type_name -> impactEffect.Targets
	0,   // 61: impactEffect.cal_eject_arrival_request.impactor:type_name -> impactEffect.Impactor
	1,   // 62: impactEffect.cal_eject_arrival_request.targets:type_name -> impactEffect.Targets
	0,   // 63: impactEffect.cal_ejecta_thickness_request.impactor:type_name -> impactEffect.Impactor
	1,   // 64: impactEffect.cal_ejecta_thickness_request.targets:type_name -> impactEffect.Targets
	0,   // 65: impactEffect.cal_d_frag_request.impactor:type_name -> impactEffect.Impactor
	1,   // 66: impactEffect.cal_d_frag_request.targets:type_name -> impactEffect.Targets
	0,   // 67: impactEffect.cal_themal_request.impactor:type_name -> impactEffect.Impactor
	1,   // 68: impactEffect.cal_themal_request.targets:type_name -> impactEffect.Targets
	0,   // 69: impactEffect.cal_magnitude_request.impactor:type_name -> impactEffect.Impactor
	1,   // 70: impactEffect.cal_magnitude_request.targets:type_name -> impactEffect.Targets
	0,   // 71: impactEffect.cal_magnitude2_request.impactor:type_name -> impactEffect.Impactor
	1,   // 72: impactEffect.cal_magnitude2_request.targets:type_name -> impactEffect.Targets
	0,   // 73: impactEffect.cal_shock_arrival_request.impactor:type_name -> impactEffect.Impactor
	1,   // 74: impactEffect.cal_shock_arrival_request.targets:type_name -> impactEffect.Targets
	0,   // 75: impactEffect.cal_vmax_request.impactor:type_name -> impactEffect.Impactor
	1,   // 76: impactEffect.cal_vmax_request.targets:type_name -> impactEffect.Targets
	0,   // 77: impactEffect.cal_shock_damage_request.impactor:type_name -> impactEffect.Impactor
	1,   // 78: impactEffect.cal_shock_damage_request.targets:type_name -> impactEffect.Targets
	0,   // 79: impactEffect.cal_dec_level_request.impactor:type_name -> impactEffect.Impactor
	1,   // 80: impactEffect.cal_dec_level_request.targets:type_name -> impactEffect.Targets
	0,   // 81: impactEffect.cal_TsunamiArrivalTime_request.impactor:type_name -> impactEffect.Impactor
	1,   // 82: impactEffect.cal_TsunamiArrivalTime_request.targets:type_name -> impactEffect.Targets
	0,   // 83: impactEffect.cal_WaveAmplitudeUpperLimit_request.impactor:type_name -> impactEffect.Impactor
	1,   // 84: impactEffect.cal_WaveAmplitudeUpperLimit_request.targets:type_name -> impactEffect.Targets
	0,   // 85: impactEffect.cal_WaveAmplitudeLowerLimit_request.impactor:type_name -> impactEffect.Impactor
	1,   // 86: impactEffect.cal_WaveAmplitudeLowerLimit_request.targets:type_name -> impactEffect.Targets
	4,   // 87: impactEffect.ImpactEffectService.cal_mass:input_type -> impactEffect.cal_mass_request
	6,   // 88: impactEffect.ImpactEffectService.cal_Kinetic_energy:input_type -> impactEffect.cal_Kinetic_energy_request
	8,   // 89: impactEffect.ImpactEffectService.cal_kinetic_energy_megatons:input_type -> impactEffect.cal_kinetic_energy_megatons_request
	10,  // 90: impactEffect.ImpactEffectService.cal_rec_time:input_type -> impactEffect.cal_rec_time_request
	12,  // 91: impactEffect.ImpactEffectService.cal_i_factor:input_type -> impactEffect.cal_i_factor_request
	14,  // 92: impactEffect.ImpactEffectService.burst_velocity_at_zero:input_type -> impactEffect.burst_velocity_at_zero_request
	16,  // 93: impactEffect.ImpactEffectService.altitude_of_breakup:input_type -> impactEffect.altitude_of_breakup_request
	18,  // 94: impactEffect.ImpactEffectService.velocity_at_breakup:input_type -> impactEffect.velocity_at_breakup_request
	20,  // 95: impactEffect.ImpactEffectService.dispersion_length_scale:input_type -> impactEffect.dispersion_length_scale_request
	22,  // 96: impactEffect.ImpactEffectService.airburst_altitude:input_type -> impactEffect.airburst_altitude_request
	24,  // 97: impactEffect.ImpactEffectService.brust_velocity:input_type -> impactEffect.brust_velocity_request
	26,  // 98: impactEffect.ImpactEffectService.dispersion_of_impactor:input_type -> impactEffect.dispersion_of_impactor_request
	28,  // 99: impactEffect.ImpactEffectService.fraction_of_momentum:input_type -> impactEffect.fraction_of_momentum_request
	30,  // 100: impactEffect.ImpactEffectService.cal_trot_change:input_type -> impactEffect.cal_trot_change_request
	32,  // 101: impactEffect.ImpactEffectService.cal_energy_atmosphere:input_type -> impactEffect.cal_energy_atmosphere_request
	34,  // 102: impactEffect.ImpactEffectService.cal_energy_blast_surface:input_type -> impactEffect.cal_energy_blast_surface_request
	36,  // 103: impactEffect.ImpactEffectService.cal_mass_of_water:input_type -> impactEffect.cal_mass_of_water_request
	38,  // 104: impactEffect.ImpactEffectService.cal_velocity_projectile:input_type -> impactEffect.cal_velocity_projectile_request
	40,  // 105: impactEffect.ImpactEffectService.cal_energy_at_seafloor:input_type -> impactEffect.cal_energy_at_seafloor_request
	42,  // 106: impactEffect.ImpactEffectService.cal_ePIcentral_angle:input_type -> impactEffect.cal_ePIcentral_angle_request
	44,  // 107: impactEffect.ImpactEffectService.cal_scaling_diameter_constant:input_type -> impactEffect.cal_scaling_diameter_constant_request
	46,  // 108: impactEffect.ImpactEffectService.cal_anglefac:input_type -> impactEffect.cal_anglefac_request
	48,  // 109: impactEffect.ImpactEffectService.cal_wdiameter:input_type -> impactEffect.cal_wdiameter_request
	50,  // 110: impactEffect.ImpactEffectService.cal_transient_crater_diameter:input_type -> impactEffect.cal_transient_crater_diameter_request
	52,  // 111: impactEffect.ImpactEffectService.cal_depthr:input_type -> impactEffect.cal_depthr_request
	54,  // 112: impactEffect.ImpactEffectService.cal_cdiamater:input_type -> impactEffect.cal_cdiamater_request
	56,  // 113: impactEffect.ImpactEffectService.cal_depthfr:input_type -> impactEffect.cal_depthfr_request
	58,  // 114: impactEffect.ImpactEffectService.cal_vCrater:input_type -> impactEffect.cal_vCrater_request
	60,  // 115: impactEffect.ImpactEffectService.cal_vratio:input_type -> impactEffect.cal_vratio_request
	62,  // 116: impactEffect.ImpactEffectService.cal_vCrater_vRation:input_type -> impactEffect.cal_vCrater_vRation_request
	64,  // 117: impactEffect.ImpactEffectService.cal_vMelt:input_type -> impactEffect.cal_vMelt_request
	66,  // 118: impactEffect.ImpactEffectService.cal_mratio_and_mcratio:input_type -> impactEffect.cal_mratio_and_mcratio_request
	68,  // 119: impactEffect.ImpactEffectService.cal_eject_arrival:input_type -> impactEffect.cal_eject_arrival_request
	70,  // 120: impactEffect.ImpactEffectService.cal_ejecta_thickness:input_type -> impactEffect.cal_ejecta_thickness_request
	72,  // 121: impactEffect.ImpactEffectService.cal_d_frag:input_type -> impactEffect.cal_d_frag_request
	74,  // 122: impactEffect.ImpactEffectService.cal_themal:input_type -> impactEffect.cal_themal_request
	76,  // 123: impactEffect.ImpactEffectService.cal_magnitude:input_type -> impactEffect.cal_magnitude_request
	78,  // 124: impactEffect.ImpactEffectService.cal_magnitude2:input_type -> impactEffect.cal_magnitude2_request
	80,  // 125: impactEffect.ImpactEffectService.cal_shock_arrival:input_type -> impactEffect.cal_shock_arrival_request
	82,  // 126: impactEffect.ImpactEffectService.cal_vmax:input_type -> impactEffect.cal_vmax_request
	84,  // 127: impactEffect.ImpactEffectService.cal_shock_damage:input_type -> impactEffect.cal_shock_damage_request
	86,  // 128: impactEffect.ImpactEffectService.cal_dec_level:input_type -> impactEffect.cal_dec_level_request
	88,  // 129: impactEffect.ImpactEffectService.cal_TsunamiArrivalTime:input_type -> impactEffect.cal_TsunamiArrivalTime_request
	90,  // 130: impactEffect.ImpactEffectService.cal_WaveAmplitudeUpperLimit:input_type -> impactEffect.cal_WaveAmplitudeUpperLimit_request
	92,  // 131: impactEffect.ImpactEffectService.cal_WaveAmplitudeLowerLimit:input_type -> impactEffect.cal_WaveAmplitudeLowerLimit_request
	5,   // 132: impactEffect.ImpactEffectService.cal_mass:output_type -> impactEffect.cal_mass_response
	7,   // 133: impactEffect.ImpactEffectService.cal_Kinetic_energy:output_type -> impactEffect.cal_Kinetic_energy_response
	9,   // 134: impactEffect.ImpactEffectService.cal_kinetic_energy_megatons:output_type -> impactEffect.cal_kinetic_energy_megatons_response
	11,  // 135: impactEffect.ImpactEffectService.cal_rec_time:output_type -> impactEffect.cal_rec_time_response
	13,  // 136: impactEffect.ImpactEffectService.cal_i_factor:output_type -> impactEffect.cal_i_factor_response
	15,  // 137: impactEffect.ImpactEffectService.burst_velocity_at_zero:output_type -> impactEffect.burst_velocity_at_zero_response
	17,  // 138: impactEffect.ImpactEffectService.altitude_of_breakup:output_type -> impactEffect.altitude_of_breakup_response
	19,  // 139: impactEffect.ImpactEffectService.velocity_at_breakup:output_type -> impactEffect.velocity_at_breakup_response
	21,  // 140: impactEffect.ImpactEffectService.dispersion_length_scale:output_type -> impactEffect.dispersion_length_scale_response
	23,  // 141: impactEffect.ImpactEffectService.airburst_altitude:output_type -> impactEffect.airburst_altitude_response
	25,  // 142: impactEffect.ImpactEffectService.brust_velocity:output_type -> impactEffect.brust_velocity_response
	27,  // 143: impactEffect.ImpactEffectService.dispersion_of_impactor:output_type -> impactEffect.dispersion_of_impactor_response
	29,  // 144: impactEffect.ImpactEffectService.fraction_of_momentum:output_type -> impactEffect.fraction_of_momentum_response
	31,  // 145: impactEffect.ImpactEffectService.cal_trot_change:output_type -> impactEffect.cal_trot_change_response
	33,  // 146: impactEffect.ImpactEffectService.cal_energy_atmosphere:output_type -> impactEffect.cal_energy_atmosphere_response
	35,  // 147: impactEffect.ImpactEffectService.cal_energy_blast_surface:output_type -> impactEffect.cal_energy_blast_surface_response
	37,  // 148: impactEffect.ImpactEffectService.cal_mass_of_water:output_type -> impactEffect.cal_mass_of_water_response
	39,  // 149: impactEffect.ImpactEffectService.cal_velocity_projectile:output_type -> impactEffect.cal_velocity_projectile_response
	41,  // 150: impactEffect.ImpactEffectService.cal_energy_at_seafloor:output_type -> impactEffect.cal_energy_at_seafloor_response
	43,  // 151: impactEffect.ImpactEffectService.cal_ePIcentral_angle:output_type -> impactEffect.cal_ePIcentral_angle_response
	45,  // 152: impactEffect.ImpactEffectService.cal_scaling_diameter_constant:output_type -> impactEffect.cal_scaling_diameter_constant_response
	47,  // 153: impactEffect.ImpactEffectService.cal_anglefac:output_type -> impactEffect.cal_anglefac_response
	49,  // 154: impactEffect.ImpactEffectService.cal_wdiameter:output_type -> impactEffect.cal_wdiameter_response
	51,  // 155: impactEffect.ImpactEffectService.cal_transient_crater_diameter:output_type -> impactEffect.cal_transient_crater_diameter_response
	53,  // 156: impactEffect.ImpactEffectService.cal_depthr:output_type -> impactEffect.cal_depthr_response
	55,  // 157: impactEffect.ImpactEffectService.cal_cdiamater:output_type -> impactEffect.cal_cdiamater_response
	57,  // 158: impactEffect.ImpactEffectService.cal_depthfr:output_type -> impactEffect.cal_depthfr_response
	59,  // 159: impactEffect.ImpactEffectService.cal_vCrater:output_type -> impactEffect.cal_vCrater_response
	61,  // 160: impactEffect.ImpactEffectService.cal_vratio:output_type -> impactEffect.cal_vratio_response
	63,  // 161: impactEffect.ImpactEffectService.cal_vCrater_vRation:output_type -> impactEffect.cal_vCrater_vRation_response
	65,  // 162: impactEffect.ImpactEffectService.cal_vMelt:output_type -> impactEffect.cal_vMelt_response
	67,  // 163: impactEffect.ImpactEffectService.cal_mratio_and_mcratio:output_type -> impactEffect.cal_mratio_and_mcratio_response
	69,  // 164: impactEffect.ImpactEffectService.cal_eject_arrival:output_type -> impactEffect.cal_eject_arrival_response
	71,  // 165: impactEffect.ImpactEffectService.cal_ejecta_thickness:output_type -> impactEffect.cal_ejecta_thickness_response
	73,  // 166: impactEffect.ImpactEffectService.cal_d_frag:output_type -> impactEffect.cal_d_frag_response
	75,  // 167: impactEffect.ImpactEffectService.cal_themal:output_type -> impactEffect.cal_themal_response
	77,  // 168: impactEffect.ImpactEffectService.cal_magnitude:output_type -> impactEffect.cal_magnitude_response
	79,  // 169: impactEffect.ImpactEffectService.cal_magnitude2:output_type -> impactEffect.cal_magnitude2_response
	81,  // 170: impactEffect.ImpactEffectService.cal_shock_arrival:output_type -> impactEffect.cal_shock_arrival_response
	83,  // 171: impactEffect.ImpactEffectService.cal_vmax:output_type -> impactEffect.cal_vmax_response
	85,  // 172: impactEffect.ImpactEffectService.cal_shock_damage:output_type -> impactEffect.cal_shock_damage_response
	87,  // 173: impactEffect.ImpactEffectService.cal_dec_level:output_type -> impactEffect.cal_dec_level_response
	89,  // 174: impactEffect.ImpactEffectService.cal_TsunamiArrivalTime:output_type -> impactEffect.cal_TsunamiArrivalTime_response
	91,  // 175: impactEffect.ImpactEffectService.cal_WaveAmplitudeUpperLimit:output_type -> impactEffect.cal_WaveAmplitudeUpperLimit_response
	93,  // 176: impactEffect.ImpactEffectService.cal_WaveAmplitudeLowerLimit:output_type -> impactEffect.cal_WaveAmplitudeLowerLimit_response
	132, // [132:177] is the sub-list for method output_type
	87,  // [87:132] is the sub-list for method input_type
	87,  // [87:87] is the sub-list for extension type_name
	87,  // [87:87] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_impactEffect_proto_init() }
func file_impactEffect_proto_init() {
	if File_impactEffect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_impactEffect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Targets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_KineticEnergyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_KineticEnergyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalKineticEnergyMegatonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalKineticEnergyMegatonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalRecTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalRecTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalIFactorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalIFactorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstVelocityAtZeroRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurstVelocityAtZeroResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltitudeOfBreakupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltitudeOfBreakupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VelocityAtBreakupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VelocityAtBreakupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispersionLengthScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispersionLengthScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirburstAltitudeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirburstAltitudeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrustVelocityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrustVelocityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispersionOfImpactorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispersionOfImpactorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionOfMomentumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionOfMomentumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalTrotChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalTrotChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyAtmosphereRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyAtmosphereResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyBlastSurfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyBlastSurfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMassOfWaterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMassOfWaterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVelocityProjectileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVelocityProjectileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyAtSeafloorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEnergyAtSeafloorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEPIcentralAngleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEPIcentralAngleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalScalingDiameterConstantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalScalingDiameterConstantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalAnglefacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalAnglefacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalWdiameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalWdiameterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalTransientCraterDiameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalTransientCraterDiameterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDepthrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDepthrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalCdiamaterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalCdiamaterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDepthfrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDepthfrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVCraterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVCraterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVratioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVratioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVCraterVRationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVCraterVRationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVMeltRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVMeltResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMratioAndMcratioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMratioAndMcratioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEjectArrivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEjectArrivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEjectaThicknessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalEjectaThicknessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDFragRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDFragResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalThemalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalThemalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMagnitudeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMagnitudeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMagnitude2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalMagnitude2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalShockArrivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalShockArrivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVmaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalVmaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalShockDamageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalShockDamageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDecLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalDecLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_TsunamiArrivalTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_TsunamiArrivalTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_WaveAmplitudeUpperLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_WaveAmplitudeUpperLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_WaveAmplitudeLowerLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_impactEffect_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cal_WaveAmplitudeLowerLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_impactEffect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_impactEffect_proto_goTypes,
		DependencyIndexes: file_impactEffect_proto_depIdxs,
		MessageInfos:      file_impactEffect_proto_msgTypes,
	}.Build()
	File_impactEffect_proto = out.File
	file_impactEffect_proto_rawDesc = nil
	file_impactEffect_proto_goTypes = nil
	file_impactEffect_proto_depIdxs = nil
}
