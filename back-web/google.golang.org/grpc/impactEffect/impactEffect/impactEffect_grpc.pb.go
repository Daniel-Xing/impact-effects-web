// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: impactEffect.proto

package impactEffect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImpactEffectServiceClient is the client API for ImpactEffectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpactEffectServiceClient interface {
	// A simple the function of ImpactEffect for test
	// calculte the Kinetic_energy of the impactor
	GetKineticEnergy(ctx context.Context, in *Impactor, opts ...grpc.CallOption) (*KineticEnergy, error)
	GetKineticEnergyMegatons(ctx context.Context, in *Impactor, opts ...grpc.CallOption) (*KineticEnergy, error)
}

type impactEffectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImpactEffectServiceClient(cc grpc.ClientConnInterface) ImpactEffectServiceClient {
	return &impactEffectServiceClient{cc}
}

func (c *impactEffectServiceClient) GetKineticEnergy(ctx context.Context, in *Impactor, opts ...grpc.CallOption) (*KineticEnergy, error) {
	out := new(KineticEnergy)
	err := c.cc.Invoke(ctx, "/impactEffect.ImpactEffectService/GetKineticEnergy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impactEffectServiceClient) GetKineticEnergyMegatons(ctx context.Context, in *Impactor, opts ...grpc.CallOption) (*KineticEnergy, error) {
	out := new(KineticEnergy)
	err := c.cc.Invoke(ctx, "/impactEffect.ImpactEffectService/Get_kinetic_energy_megatons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpactEffectServiceServer is the server API for ImpactEffectService service.
// All implementations must embed UnimplementedImpactEffectServiceServer
// for forward compatibility
type ImpactEffectServiceServer interface {
	// A simple the function of ImpactEffect for test
	// calculte the Kinetic_energy of the impactor
	GetKineticEnergy(context.Context, *Impactor) (*KineticEnergy, error)
	GetKineticEnergyMegatons(context.Context, *Impactor) (*KineticEnergy, error)
	mustEmbedUnimplementedImpactEffectServiceServer()
}

// UnimplementedImpactEffectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImpactEffectServiceServer struct {
}

func (UnimplementedImpactEffectServiceServer) GetKineticEnergy(context.Context, *Impactor) (*KineticEnergy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKineticEnergy not implemented")
}
func (UnimplementedImpactEffectServiceServer) GetKineticEnergyMegatons(context.Context, *Impactor) (*KineticEnergy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKineticEnergyMegatons not implemented")
}
func (UnimplementedImpactEffectServiceServer) mustEmbedUnimplementedImpactEffectServiceServer() {}

// UnsafeImpactEffectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpactEffectServiceServer will
// result in compilation errors.
type UnsafeImpactEffectServiceServer interface {
	mustEmbedUnimplementedImpactEffectServiceServer()
}

func RegisterImpactEffectServiceServer(s grpc.ServiceRegistrar, srv ImpactEffectServiceServer) {
	s.RegisterService(&ImpactEffectService_ServiceDesc, srv)
}

func _ImpactEffectService_GetKineticEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Impactor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactEffectServiceServer).GetKineticEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impactEffect.ImpactEffectService/GetKineticEnergy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactEffectServiceServer).GetKineticEnergy(ctx, req.(*Impactor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpactEffectService_GetKineticEnergyMegatons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Impactor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpactEffectServiceServer).GetKineticEnergyMegatons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/impactEffect.ImpactEffectService/Get_kinetic_energy_megatons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpactEffectServiceServer).GetKineticEnergyMegatons(ctx, req.(*Impactor))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpactEffectService_ServiceDesc is the grpc.ServiceDesc for ImpactEffectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpactEffectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impactEffect.ImpactEffectService",
	HandlerType: (*ImpactEffectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKineticEnergy",
			Handler:    _ImpactEffectService_GetKineticEnergy_Handler,
		},
		{
			MethodName: "Get_kinetic_energy_megatons",
			Handler:    _ImpactEffectService_GetKineticEnergyMegatons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "impactEffect.proto",
}
